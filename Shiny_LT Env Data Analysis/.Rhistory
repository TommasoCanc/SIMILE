before1975$LAT<-round(before1975$LAT, digits=4);before1975$LONG<-round(before1975$LONG, digits=4)
before2000$LAT<-round(before2000$LAT, digits=4);before2000$LONG<-round(before2000$LONG, digits=4)
before2019$LAT<-round(before2019$LAT, digits=4);before2019$LONG<-round(before2019$LONG, digits=4)
duplicated(before1950)
length(which(duplicated(before2019)==TRUE))
before1950<-before1950[!duplicated(before1950), ]
before1975<-before1975[!duplicated(before1975), ]
before2000<-before2000[!duplicated(before2000), ]
before2019<-before2019[!duplicated(before2019), ]
dif50_75<-setdiff(before1975, before1950)
dif75_00<-setdiff(before2000, before1950)
dif00_19<-setdiff(before2019, before1950)
View(dif00_19)
View(dif50_75)
View(dif75_00)
View(dif00_19)
min(dif50_75$YEAR)
max(dif50_75$YEAR)
min(dif75_00$YEAR); max(dif75_00$YEAR)
min(dif00_19$YEAR); max(dif00_19$YEAR)
before1950<-read.csv("~/Desktop/Variables_simone/occ_Clean/1950_clean.csv")
before1975<-read.csv("~/Desktop/Variables_simone/occ_Clean/1975_clean.csv")
before2000<-read.csv("~/Desktop/Variables_simone/occ_Clean/2000_clean.csv")
before2019<-read.csv("~/Desktop/Variables_simone/occ_Clean/2019_clean.csv")
variables_sub <-
raster::stack(
c(elevation_nopoles  = '~/Desktop/Variables_simone/Raster/elevation_nopoles.tif',
bio15_bv_41_50  = '~/Desktop/Variables_simone/Raster/bio15_bv_41_50.tif',
PETseasonality_env_41_50 = '~/Desktop/Variables_simone/Raster/PETseasonality_env_41_50.tif',
bio18_bv_41_50 = '~/Desktop/Variables_simone/Raster/bio18_bv_41_50.tif',
bio1_bv_41_50="~/Desktop/Variables_simone/Raster/bio1_bv_41_50.tif",
embergerQ_env_41_50="~/Desktop/Variables_simone/Raster/embergerQ_env_41_50.tif",
aridityIndexThornthwaite_env_41_50= "~/Desktop/Variables_simone/Raster/aridityIndexThornthwaite_env_41_50.tif"
)
)
variables_sub_50 <-
raster::stack(
c(elevation_nopoles  = '~/Desktop/Variables_simone/Raster/elevation_nopoles.tif',
bio15_bv_41_50  = '~/Desktop/Variables_simone/Raster/bio15_bv_41_50.tif',
PETseasonality_env_41_50 = '~/Desktop/Variables_simone/Raster/PETseasonality_env_41_50.tif',
bio18_bv_41_50 = '~/Desktop/Variables_simone/Raster/bio18_bv_41_50.tif',
bio1_bv_41_50="~/Desktop/Variables_simone/Raster/bio1_bv_41_50.tif",
embergerQ_env_41_50="~/Desktop/Variables_simone/Raster/embergerQ_env_41_50.tif",
aridityIndexThornthwaite_env_41_50= "~/Desktop/Variables_simone/Raster/aridityIndexThornthwaite_env_41_50.tif"
)
)
before1950[ ,c("x", "y")]
# Extract variable values
before1950.sp <- SpatialPointsDataFrame(coords = before1950[ ,c("x", "y")],
data = before1950,
proj4string = variables_sub_50@crs)
occ.raster <- extract(variables_sub_50, before1950)
occ.raster <- extract(variables_sub_50, before1950.sp)
occ.raster_50 <- extract(variables_sub_50, before1950.sp)
head(occ.raster_50)
occ.raster_50$date <- "1950"
head(occ.raster_50)
before1950.sp <- SpatialPointsDataFrame(coords = before1950[ ,c("x", "y")],
data = before1950,
proj4string = variables_sub_50@crs)
occ.raster_50 <- extract(variables_sub_50, before1950.sp)
occ.raster_50$date <- rep("1950", nrow(occ.raster_50))
before1950.sp <- SpatialPointsDataFrame(coords = before1950[ ,c("x", "y")],
data = before1950,
proj4string = variables_sub_50@crs)
occ.raster_50 <- extract(variables_sub_50, before1950.sp)
# Extract variable values
before1950.sp <- SpatialPointsDataFrame(coords = before1950[ ,c("x", "y")],
data = before1950,
proj4string = variables_sub_50@crs)
occ.raster_50 <- as.data.frame(extract(variables_sub_50, before1950.sp))
head(occ.raster_50)
occ.raster_50$date <- rep("1950", nrow(occ.raster_50))
head(occ.raster_50)
occ.raster_50 <- cbind(occ.raster_50, before1950[ ,c("x", "y")])
head(occ.raster_50)
shiny::runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
mainTable <- read.csv("~/Desktop/Chlorophyll_MainTable_2022-07-28.csv")
mainTable$datehour <- cut(ymd_hms(mainTable$datetimeisoformat), breaks = "hour")
head(mainTable)
data.agr <- mainTable %>% select("datehour", everything())
head(data.agr)
colnames(data.agr)[1] <- "datetimeisoformat"
mainTable.agr <- aggregate(. ~ datetimeisoformat, data = data.agr, FUN = mean)
head(mainTable.agr)
mainTable.agr[, 2:ncol(mainTable.agr)] <- round(mainTable.agr[, 2:ncol(mainTable.agr)], digits = 2)
head(mainTable.agr)
# Convert and create date columns
mainTable.agr$datetimeisoformat <- ymd_hms(mainTable.agr$datetimeisoformat)
mainTable.agr$year <- year(ymd_hms(mainTable.agr$datetimeisoformat))
mainTable.agr$month <- month(ymd_hms(mainTable.agr$datetimeisoformat))
mainTable.agr$day <- day(ymd_hms(mainTable.agr$datetimeisoformat))
mainTable.agr$hour <- hour(ymd_hms(mainTable.agr$datetimeisoformat))
mainTable.agr$minute <- minute(ymd_hms(mainTable.agr$datetimeisoformat))
mainTable.agr$second <- second(ymd_hms(mainTable.agr$datetimeisoformat))
head(mainTable.agr)
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
mainTable <- read.csv("~/Desktop/Chlorophyll_MainTable_2022-07-28.csv")
head(mainTable)
mainTable <- mainTable[,-c(10:11)]
head(mainTable)
mainTable <- read.csv("~/Desktop/Chlorophyll_MainTable_2022-07-28.csv")
head(mainTable)
misCol <- c("Ch1.S", "Ch2.D", "PC3", "PE4")
mainTable <- mainTable[,-c(10:11)]
misColCondition <- colnames(mainTable)[colnames(mainTable) %in% misCol]
misColCondition
length(misColCondition)
dataPlot[,misColCondition][1]
mainTable[,misColCondition][1]
dn.plot(mainTable[,misColCondition][1],
latitude = 45.9283,
longitude = 8.5554,
title = "Ciao",
f.ncol = 1,
f.nrow = 1)
View(dn.plot)
View(dn.plot)
View(dn.plot)
dn.plot(mainTable[,misColCondition][1],
latitude = 45.9283,
longitude = 8.5554)
#####
x = mainTable
x$daySun <- as.character(cut(ymd_hms(x$datetimeisoformat), breaks="day"))
x
x$hourSun <- as.character(cut(ymd_hms(x$datetimeisoformat), breaks="hour"))
x
day.night <- data.frame()
sun.df <- data.frame()
latitude = 45.9283
longitude = 8.5554
for(i in 1:length(unique(x$daySun))){
sun <- getSunlightTimes(
date = seq.Date(as.Date(as.character(unique(x$daySun)[i])), as.Date(as.character(unique(x$daySun)[i])),
by = 1),
keep = c("sunrise", "sunset"),
lat = latitude,
lon = longitude,
tz = "UTC") # UTC: Coordinated Universal Time
sun$sunrise <- as.character(ymd_hms(sun$sunrise))
sun$sunset <- as.character(ymd_hms(sun$sunset))
x.sub <- x[x$daySun %in% unique(x$daySun)[i], ]
day.night <- rbind(day.night, x.sub)
sun.df <- rbind(sun.df, sun)
}
day.night
sun.df
misCol <- colnames(x)[colnames(x) %ni% c("datetimeisoformat", "year", "month", "day",
"hour", "minute", "second",
"daySun", "hourSun")]
for (i in 1:length(misCol)) {
myplots[[i]] <- local({
i <- i
p1 <- ggplot()+
#day
geom_rect(data = sun.df, aes(xmin = ymd_hms(sunrise), xmax = ymd_hms(sunset), ymin = -Inf, ymax = Inf),
color = "#FF9900", fill = "#FFCC00", alpha = .4) +
geom_point(data = day.night, aes(x = ymd_hms(datetimeisoformat),
y = day.night[ ,misCol[i]]), cex = .2) +
xlab("") + ylab(misCol[i]) +
labs(fill = "Day/Night") +
theme_bw()
})
}
myplots <- vector('list', length(misCol))
for (i in 1:length(misCol)) {
myplots[[i]] <- local({
i <- i
p1 <- ggplot()+
#day
geom_rect(data = sun.df, aes(xmin = ymd_hms(sunrise), xmax = ymd_hms(sunset), ymin = -Inf, ymax = Inf),
color = "#FF9900", fill = "#FFCC00", alpha = .4) +
geom_point(data = day.night, aes(x = ymd_hms(datetimeisoformat),
y = day.night[ ,misCol[i]]), cex = .2) +
xlab("") + ylab(misCol[i]) +
labs(fill = "Day/Night") +
theme_bw()
})
}
myplots[1]
View(dn.plot)
View(cond.plot)
x$daySun <- as.character(cut(ymd_hms(x$datetimeisoformat), breaks="day"))
x$hourSun <- as.character(cut(ymd_hms(x$datetimeisoformat), breaks="hour"))
day.night <- data.frame()
sun.df <- data.frame()
for(i in 1:length(unique(x$daySun))){
sun <- getSunlightTimes(
date = seq.Date(as.Date(as.character(unique(x$daySun)[i])), as.Date(as.character(unique(x$daySun)[i])),
by = 1),
keep = c("sunrise", "sunset"),
lat = latitude,
lon = longitude,
tz = "UTC") # UTC: Coordinated Universal Time
sun$sunrise <- as.character(ymd_hms(sun$sunrise))
sun$sunset <- as.character(ymd_hms(sun$sunset))
x.sub <- x[x$daySun %in% unique(x$daySun)[i], ]
day.night <- rbind(day.night, x.sub)
sun.df <- rbind(sun.df, sun)
}
misCol <- colnames(x)[colnames(x) %ni% c("datetimeisoformat", "year", "month", "day",
"hour", "minute", "second",
"daySun", "hourSun")]
myplots <- lapply(1:length(misCol), function(i) {
ggplot()+
#day
geom_rect(data = sun.df, aes(xmin = ymd_hms(sunrise), xmax = ymd_hms(sunset), ymin = -Inf, ymax = Inf),
color = "#FF9900", fill = "#FFCC00", alpha = .4) +
geom_point(data = day.night, aes(x = ymd_hms(datetimeisoformat),
y = day.night[ ,misCol[i]]), cex = .2) +
xlab("") + ylab(misCol[i]) +
labs(fill = "Day/Night") +
theme_bw()
})
myplots[[1]]
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
View(dn.plot)
View(dn.plot)
View(dn.plot)
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
mainTable <- read.csv("~/Desktop/Chlorophyll_MainTable_2022-07-28.csv")
misCol <- c("Ch1.S", "Ch2.D", "PC3", "PE4")
head(mainTable)
mainTable <- mainTable[,-c(10:11)]
misColCondition <- colnames(mainTable)[colnames(mainTable) %in% misCol]
#####
x = mainTable
x$daySun <- as.character(cut(ymd_hms(x$datetimeisoformat), breaks="day"))
x$hourSun <- as.character(cut(ymd_hms(x$datetimeisoformat), breaks="hour"))
day.night <- data.frame()
sun.df <- data.frame()
for(i in 1:length(unique(x$daySun))){
sun <- getSunlightTimes(
date = seq.Date(as.Date(as.character(unique(x$daySun)[i])), as.Date(as.character(unique(x$daySun)[i])),
by = 1),
keep = c("sunrise", "sunset"),
lat = latitude,
lon = longitude,
tz = "UTC") # UTC: Coordinated Universal Time
sun$sunrise <- as.character(ymd_hms(sun$sunrise))
sun$sunset <- as.character(ymd_hms(sun$sunset))
x.sub <- x[x$daySun %in% unique(x$daySun)[i], ]
day.night <- rbind(day.night, x.sub)
sun.df <- rbind(sun.df, sun)
}
misCol <- colnames(x)[colnames(x) %ni% c("datetimeisoformat", "year", "month", "day",
"hour", "minute", "second",
"daySun", "hourSun")]
latitude = 45.9283
longitude = 8.5554
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
for(i in 1:length(unique(x$daySun))){
sun <- getSunlightTimes(
date = seq.Date(as.Date(as.character(unique(x$daySun)[i])), as.Date(as.character(unique(x$daySun)[i])),
by = 1),
keep = c("sunrise", "sunset"),
lat = latitude,
lon = longitude,
tz = "UTC") # UTC: Coordinated Universal Time
sun$sunrise <- as.character(ymd_hms(sun$sunrise))
sun$sunset <- as.character(ymd_hms(sun$sunset))
x.sub <- x[x$daySun %in% unique(x$daySun)[i], ]
day.night <- rbind(day.night, x.sub)
sun.df <- rbind(sun.df, sun)
}
misCol <- colnames(x)[colnames(x) %ni% c("datetimeisoformat", "year", "month", "day",
"hour", "minute", "second",
"daySun", "hourSun")]
plot_ly(x = ymd_hms(datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers')
library(plotly)
plot_ly(x = ymd_hms(datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers')
day.night
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers')
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(list(type = "rect", line = list(color = "black"),
x0 = ymd_hms(sun.df$sunrise), x1 = ymd_hms(sun.df$sunset)))
sun.df$sunrise
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(list(type = "rect", line = list(color = "black"),
x0 = ymd_hms(sun.df$sunrise), x1 = ymd_hms(sun.df$sunset), y0 = -Inf, y1 = Inf))
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(shapes = list(hline(0.2))
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(shapes = list(hline(0.2)))
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(shapes = list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(day.night$sunrise), x1 = ymd_hms(day.night$sunset), xref = "x",
y0 = 1000, y1 = 1000, yref = "y"))
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(shapes = list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(day.night$sunrise), x1 = ymd_hms(day.night$sunset), xref = "x",
y0 = -Inf, y1 = Inf, yref = "y"))
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(shapes = list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(day.night$sunrise), x1 = ymd_hms(day.night$sunset),
y0 = -Inf, y1 = Inf))
day.night$sunrise
ymd_hms(day.night$sunrise)
day.night
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(shapes = list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sunrise), x1 = ymd_hms(sunset),
y0 = -Inf, y1 = Inf))
day.night
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(shapes = list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise), x1 = ymd_hms(sun.df$sunset),
y0 = -Inf, y1 = Inf))
sun.df$sunrise
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(shapes = list(
vrect(fillcolor = "red", x0 = ymd_hms(sun.df$sunrise), x1 = ymd_hms(sun.df$sunset))))
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
for(i in 1:length(sun.df$sunrise)){
layout(shapes = list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf))
}
length(sun.df$sunrise)
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(shapes = list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[1]), x1 = ymd_hms(sun.df$sunset[1]),
y0 = -Inf, y1 = Inf))
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(shapes =
for(i in 1:length(sun.df$sunrise)){
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
}
)
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
for(i in 1:length(sun.df$sunrise)){
layout(shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
)
}
plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers') %>%
layout(shapes =
for(i in 1:length(sun.df$sunrise)){
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
}
)
fig <- plot_ly(x = ymd_hms(day.night$datetimeisoformat), y = day.night[ ,misCol[1]],
type = 'scatter',
mode = 'markers')
return_fig <- fig
for (i in 1:2){
# print(dim(temp_dat))
return_fig <-
return_fig %>%
layout(shapes =
for(i in 1:length(sun.df$sunrise)){
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
}
)
}
return_fig
sun.df$sunrise[i]
return_fig <- fig
for (i in 1:2){
# print(dim(temp_dat))
return_fig <-
return_fig %>%
layout(shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
)
}
return_fig
return_fig <- fig
for (i in 1:length(sun.df$sunrise)){
# print(dim(temp_dat))
return_fig <-
return_fig %>%
layout(shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
)
}
return_fig
return_fig <- fig
for (i in 1:length(sun.df$sunrise)){
# print(dim(temp_dat))
return_fig %>%
layout(shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
)
}
return_fig
return_fig <- fig
for (i in 1:2) {
return_fig <- add_polygons(p, x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
}
for (i in 1:2) {
return_fig <- add_polygons(return_fig, x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
}
return_fig
return_fig <- fig
for (i in 1:2) {
return_fig <- layout(return_fig, shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
)
}
return_fig
return_fig <- fig
for (i in 1:2) {
return_fig <<- layout(return_fig, shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
)
}
return_fig
return_fig <- layout(return_fig, shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise), x1 = ymd_hms(sun.df$sunset),
y0 = -Inf, y1 = Inf)
)
return_fig
View(dn.plot)
shiny::runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
