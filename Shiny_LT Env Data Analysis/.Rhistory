p + facet_grid(~ location_code,) +
geom_point(data = subset(x, location_code == "A"), aes(colour = factor(year))) +
geom_point(data = subset(x, location_code == "B"), aes(colour = factor(year))) +
geom_point(data = subset(x, location_code == "C"), aes(colour = factor(year))) +
geom_point(data = subset(x, location_code == "D"), aes(colour = factor(year))) +
geom_point(data = subset(x, location_code == "E"), aes(colour = factor(year))) +
geom_point(data = subset(x, location_code == "F"), aes(colour = factor(year)))
p + facet_grid(year ~ location_code) +
geom_point(data = subset(x, location_code == "A")) +
geom_point(data = subset(x, location_code == "B")) +
geom_point(data = subset(x, location_code == "C")) +
geom_point(data = subset(x, location_code == "D")) +
geom_point(data = subset(x, location_code == "E")) +
geom_point(data = subset(x, location_code == "F"))
p + facet_grid(location_code ~ year) +
geom_point(data = subset(x, location_code == "A")) +
geom_point(data = subset(x, location_code == "B")) +
geom_point(data = subset(x, location_code == "C")) +
geom_point(data = subset(x, location_code == "D")) +
geom_point(data = subset(x, location_code == "E")) +
geom_point(data = subset(x, location_code == "F"))
if (!require("shiny"))
install.packages("shiny")
require(shiny)
runGitHub('biomapper_1.0_html_intel','TommasoCanc', ref="main")
if (!require("shiny"))
install.packages("shiny")
require(shiny)
runGitHub('biomapper_1.0_html_intel','TommasoCanc', ref="main")
runGitHub('biomapper_1.0_html_intel','TommasoCanc', ref="main")
runApp('Desktop/GitHub/biomapper_1.0_html_intel/biomapper_1.0_html_intel')
runApp('Desktop/GitHub/biomapper_1.0_html_intel/biomapper_1.0_html_intel')
runApp('Desktop/GitHub/biomapper_1.0_html_intel/biomapper_1.0_html_intel')
runApp('Desktop/GitHub/biomapper_1.0_html_intel/biomapper_1.0_html_intel')
runApp('Desktop/GitHub/biomapper_1.0_html_intel/biomapper_1.0_html_intel')
runApp('Desktop/GitHub/biomapper_1.0_html_intel/biomapper_1.0_html_intel')
shiny::runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
# Create main table reading the .csv data
mainTable.df <- read.csv("~/Desktop/Chlorophyll_2022-08-12.csv")
head(mainTable.df)
cond.df <- mainTable.df
misCol <- c("Ch1.S", "Ch2.D",  "PC3",  "PE4")
misColCondition <- colnames(cond.df)[colnames(cond.df) %in% misCol]
misColCondition
y <- cond.df[grepl(paste0("c1_"), names(cond.df))]
y
names(cond.df)
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
y
x <- cond.df[, c(misColCondition)]
x
x <- cbind(x, y)
x
cond.plot(x, condition = 2, title = paste(colnames(cond.df[, misColCondition])[1]), nPlot = 1)
library(plotly)
head(x)
y <- x[grepl(paste0("c", condition, "_"), names(x))]
condition = 2
y <- x[grepl(paste0("c", condition, "_"), names(x))]
y
x$x <- 1:nrow(x)
x
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
i=1
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
cd1
cd0
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
plot_ly(data = cd1, x = ~x, y = ~cd1[,i])
plot_ly(data = cd1, x = ~x, y = ~cd1[,i], mode="scatter")
plot_ly(data = cd1, x = ~x, y = ~cd1[,i])
plot_ly(data = cd1, x = ~x, y = ~cd1[,i], color = ~cd1[,i])
plot_ly(data = cd1, x = ~x, y = ~cd1[,i], color = ~as.factor(cd1[,i]))
cd1[,i]
head(cd1)
head(x)
plot_ly(data = cd1, x = ~x, y = ~cd1[,i], color = ~as.factor(x[,i+3]))
x[,i+3]
plot_ly(data = cd1, x = ~x, y = ~cd1[,i], color = ~as.factor(x[,i+4]))
x[,i+4]
as.factor(x[,i+4])
plot_ly(data = cd1, x = ~x, y = ~cd1[,i], color = ~as.factor(x[,c(i+4)]))
plot_ly(data = cd1, x = ~x, y = ~cd1[,i], color = ~as.factor(x[,5]))
a <- x[,5]
plot_ly(data = cd1, x = ~x, y = ~cd1[,i], color = ~x[,i+4])
y <- x[grepl(paste0("c", condition, "_"), names(x))]
x$xplot <- 1:nrow(x)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
head(cd1)
plot_ly(data = cd1, x = ~xplot, y = ~cd1[,i], color = ~x[,i+4])
plot_ly(data = x, x = ~xplot, y = ~cd1[,i], color = ~x[,i+4])
plot_ly(data = cd1, x = ~xplot, y = ~cd1[,i])
head(cd1)
y <- x[grepl(paste0("c", condition, "_"), names(x))]
head(x)
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
x <- cond.df[, c(misColCondition)]
x <- cbind(x, y)
y <- x[grepl(paste0("c", condition, "_"), names(x))]
x$xplot <- 1:nrow(x)
x
head(x)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
plot_ly(data = cd1, x = ~xplot, y = ~cd1[,i])
plot_ly(data = cd1, x = ~xplot, y = ~cd1[,i], color = ~x[,i+4])
plot_ly(data = cd1, x = ~xplot, y = ~cd1[,i], color = ~as.factor(x[,i+4]))
plot_ly(data = cd1, x = ~xplot, y = ~cd1[,i], color = ~as.factor(x[,i+4]))
i=3
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
plot_ly(data = cd1, x = ~xplot, y = ~cd1[,i], color = ~as.factor(x[,i+4]))
plot_ly(data = x, x = ~xplot, y = ~x[,i], color = ~as.factor(x[,i+4]))
head(x)
head(cond.df)
x <- cbind(cond.df$datetimeisoformat, x, y)
x
plot_ly(data = x, x = ~datetimeisoformat, y = ~x[,i], color = ~as.factor(x[,i+4]))
head(x)
plot_ly(data = x, x = ~cond.df$datetimeisoformat, y = ~x[,i], color = ~as.factor(x[,i+4]))
i
xplot
plot_ly(data = x, x = ~xplot, y = ~x[,i], color = ~as.factor(x[,i+4]))
x[,i]
head(x)
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
x <- cond.df[, c(misColCondition)]
x <- cbind(x, y)
y <- x[grepl(paste0("c", condition, "_"), names(x))]
x$xplot <- 1:nrow(x)
i=3
plot_ly(data = x, x = ~xplot, y = ~x[,i], color = ~as.factor(x[,i+4]))
plot_ly(data = x, x = ~xplot, y = ~x[,i], color = ~as.factor(x[,i+4]), mode="scatter")
plot_ly(data = x, x = ~xplot, y = ~x[,i], color = ~as.factor(x[,i+4]), mode="markers")
plot_ly(data = x, x = ~xplot, y = ~x[,i], color = ~as.factor(x[,i+4]), mode="markers", colors = c("blue", "red"))
plot_ly(data = x, x = ~xplot, y = ~x[,i], color = ~as.factor(x[,i+4]), mode="markers", colors = c("red", "blue"))
head(x)
head(cond.df)
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
x <- cond.df[, c(misColCondition)]
x <- cbind(cond.df$datetimeisoformat, x, y)
y <- x[grepl(paste0("c", condition, "_"), names(x))]
x$xplot <- 1:nrow(x)
plot_ly(data = x, x = ~xplot, y = ~x[,i+1], color = ~as.factor(x[,i+5]), mode="markers", colors = c("red", "blue"))
head(x)
plot_ly(data = x, x = ~cond.df$datetimeisoformat, y = ~x[,i+1], color = ~as.factor(x[,i+5]), mode="markers", colors = c("red", "blue"))
plot_ly(data = x, x = ~xplot, y = ~x[,i], color = ~as.factor(x[,i+4]), type = 'scatter', mode="markers", colors = c("red", "blue"))
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
x <- cond.df[, c(misColCondition)]
head(cond.df)
x <- cbind(datetimeisoformat, x, y)
x <- cbind(cond.df$datetimeisoformat, x, y)
y <- x[grepl(paste0("c", condition, "_"), names(x))]
x$xplot <- 1:nrow(x)
plot_ly(data = x, x = ~cond.df$datetimeisoformat, y = ~x[,i+1], color = ~as.factor(x[,i+5]), type = 'scatter', mode="markers", colors = c("red", "blue"))
# load packages
library(hypervolume)
library(ggplot2)
library(tidyverse)
# calculate occupancy on the penguins dataset
data(penguins,package='palmerpenguins')
penguins_no_na = as.data.frame(na.omit(penguins))
penguins_no_na_split = split(penguins_no_na,
paste(penguins_no_na$species, penguins_no_na$sex,
sep = "_"))
head(penguins_no_na_split)
hv_list = lapply(penguins_no_na_split, function(x) hypervolume_gaussian(
x[, c("bill_length_mm","bill_depth_mm","flipper_length_mm")],
samples.per.point=75, verbose = FALSE))
hv_list
plot(hv_list)
hv_list <- hypervolume_join(hv_list)
hv_list
hv_occupancy_list_sex <- hypervolume_n_occupancy(hv_list, verbose = FALSE,
classification = rep(c("female", "male"), each = 3))
hv_occupancy_list_sex
# get the mean
get_occupancy_stats(hv_occupancy_list_sex, FUN = mean)
# Create main table reading the .csv data
mainTable.df <- read.csv("~/Desktop/Chlorophyll_2022-08-12.csv")
cond.df <- mainTable.df
head(mainTable.df)
misCol <- c("Ch1.S", "Ch2.D",  "PC3",  "PE4")
misColCondition <- colnames(cond.df)[colnames(cond.df) %in% misCol]
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
x <- cond.df[, c(misColCondition)]
x <- cbind(cond.df$datetimeisoformat, x, y)
cond.plot(x, condition = 2, title = paste(colnames(cond.df[, misColCondition])[1]), nPlot = 1)
y <- x[grepl(paste0("c", condition, "_"), names(x))]
condition = 2
y <- x[grepl(paste0("c", condition, "_"), names(x))]
y
x$xplot <- 1:nrow(x)
head(x)
i=1
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
cd0
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
x <- cond.df[, c(misColCondition)]
x <- cbind(x, y, cond.df$datetimeisoformat)
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
x <- cond.df[, c(misColCondition)]
x <- cbind(x, y, cond.df$datetimeisoformat)
y <- x[grepl(paste0("c", condition, "_"), names(x))]
head(x)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
plot_ly(data = x, x = ~cond.df$datetimeisoformat, y = ~x[i], type = 'scatter', mode="markers", colors = c("blue"))
library(plotly)
plot_ly(data = x, x = ~cond.df$datetimeisoformat, y = ~x[i], type = 'scatter', mode="markers", colors = c("blue"))
plot_ly(data = x, x = ~cond.df$datetimeisoformat, y = ~x[,i], type = 'scatter', mode="markers", colors = c("blue"))
plot_ly(data = cd1, x = ~cond.df$datetimeisoformat, y = ~cd1[,i], type = 'scatter', mode="markers", colors = c("blue")) %>%
add_trace(data = cd0, x = ~cond.df$datetimeisoformat, y = ~cd0[,i], type = 'scatter', mode="markers", colors = c("red"))
plot_ly(data = cd1, x = ~cond.df$datetimeisoformat, y = ~cd1[,i], type = 'scatter', mode="markers", colors = c("blue"))
cd1
head(cd1)
colnames(cd1[i])
cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
head(cd1)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
cd0
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
head(cd1)
plot_ly(data = cd1, x = ~cond.df$datetimeisoformat, y = ~cd1[,i], type = 'scatter', mode="markers", colors = c("blue")) %>%
add_trace(data = cd0, x = ~cond.df$datetimeisoformat, y = ~cd0[,i], marker = list(color = 'red'))
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue")
ggplot() +
geom_point(data = cd1, aes(x = cond.df$datetimeisoformat, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = cond.df$datetimeisoformat, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
ggplot() +
geom_point(data = cd1, aes(x = cond.df$datetimeisoformat, y = cd1[,i]),
shape = 21, color = "blue")
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
cd0
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
ncol(cd0)
nrow(cd0)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
if(nrow(cd0) > 0){
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
cd.tot <- rbid(cd1, cd0)
} else {
cd.tot <- cd1
}
cd.tot
plot_ly(data = cd1, x = ~cond.df$datetimeisoformat, y = ~cd1[,i], type = 'scatter', mode="markers", color = ~factor(condition),
colors = c("blue", "red"))
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = c("blue", "red"))
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition))
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = c("blue"))
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition),
if(unique(cd.tot$condition) = 2) {
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition),
if(unique(cd.tot$condition) == 2) {
colors = c("blue", "red")
} else {
colors = c("blue")
}
)
unique(cd.tot$condition)
col.points <- if(unique(cd.tot$condition) == 2) { c("blue", "red")} else {"blue"}
col.points
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = col.points)
i=3
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
if(nrow(cd0) > 0){
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
cd.tot <- rbid(cd1, cd0)
} else {
cd.tot <- cd1
}
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
if(nrow(cd0) > 0){
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
cd.tot <- rbind(cd1, cd0)
} else {
cd.tot <- cd1
}
col.points <- if(unique(cd.tot$condition) == 2) { c("blue", "red")} else {"blue"}
col.points
unique(cd.tot$condition)
length(unique(cd.tot$condition))
col.points <- if(length(unique(cd.tot$condition)) == 2) { c("blue", "red")} else {"blue"}
col.points
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = col.points)
head(cd.tot)
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,1],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = col.points)
head()
head(cd.tot)
cd1$`cond.df$datetimeisoformat` <- ymd_hms(cd1$`cond.df$datetimeisoformat`)
library(lubridate)
cd1$`cond.df$datetimeisoformat` <- ymd_hms(cd1$`cond.df$datetimeisoformat`)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
cd1$`cond.df$datetimeisoformat` <- ymd_hms(cd1$`cond.df$datetimeisoformat`)
#head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
if(nrow(cd0) > 0){
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
cd0$`cond.df$datetimeisoformat` <- ymd_hms(cd0$`cond.df$datetimeisoformat`)
cd.tot <- rbind(cd1, cd0)
} else {
cd.tot <- cd1
}
col.points <- if(length(unique(cd.tot$condition)) == 2) { c("blue", "red")} else {"blue"}
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,1],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = col.points)
head(cd1)
View(cd1)
View(cd0)
View(x)
cd1 <-x[y[i] == 1, ]
cd1 <-x[y[i] == 1, ]
head(cd1)
cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
head(cd1)
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
head(cd1)
View(cd.tot)
View(cd.tot)
cd.tot %>% arrange(cond.df$datetimeisoformat)
cd.tot <- cd.tot %>% arrange(cond.df$datetimeisoformat)
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,1],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = col.points)
View(cd.tot)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
cd1$`cond.df$datetimeisoformat` <- ymd_hms(cd1$`cond.df$datetimeisoformat`)
#head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
if(nrow(cd0) > 0){
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
cd0$`cond.df$datetimeisoformat` <- ymd_hms(cd0$`cond.df$datetimeisoformat`)
cd.tot <- rbind(cd1, cd0)
} else {
cd.tot <- cd1
}
cd.tot <- cd.tot %>% arrange(cond.df$datetimeisoformat)
View(cd.tot)
colnames(x)
colnames(x)[length(x)]
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
x <- cond.df[, c(misColCondition)]
x <- cbind(x, y, cond.df$datetimeisoformat)
colnames(x)[length(x)] <- "datetimeisoformat"
colnames(x)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "datetimeisoformat")]
cd1$condition <- 1
cd1$`cond.df$datetimeisoformat` <- ymd_hms(cd1$`cond.df$datetimeisoformat`)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "datetimeisoformat")]
cd1$condition <- 1
cd1$`cond.df$datetimeisoformat` <- ymd_hms(cd1$`cond.df$datetimeisoformat`)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "datetimeisoformat")]
cd1$condition <- 1
cd1$datetimeisoformat <- ymd_hms(cd1$datetimeisoformat)
#head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
if(nrow(cd0) > 0){
cd0 <- cd0[,c(colnames(cd0[i]), "datetimeisoformat")]
cd0$condition <- 0
cd0$datetimeisoformat <- ymd_hms(cd0$datetimeisoformat)
cd.tot <- rbind(cd1, cd0)
} else {
cd.tot <- cd1
}
cd.tot <- dplyr::arrange(cd.tot, datetimeisoformat)
View(cd.tot)
col.points <- if(length(unique(cd.tot$condition)) == 2) { c("blue", "red")} else {"blue"}
plot_ly(data = cd.tot, x = ~datetimeisoformat, y = ~cd.tot[,1],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = col.points)
shiny::runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
ui <- fluidPage(
titlePanel("Validation App"),
sidebarLayout(
sidebarPanel(
selectInput("data", label = "Data set",
choices = c("", "mtcars", "faithful", "iris"))
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
data <- reactive({ get(input$data, 'package:datasets') })
output$plot <- renderPlot({
hist(data()[, 1], col = 'forestgreen', border = 'white')
})
output$table <- renderTable({
head(data())
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Validation App"),
sidebarLayout(
sidebarPanel(
selectInput("data", label = "Data set",
choices = c("", "mtcars", "faithful", "iris"))
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
data <- reactive({
validate(
need(input$data != "", "Please select a data set")
)
get(input$data, 'package:datasets')
})
output$plot <- renderPlot({
hist(data()[, 1], col = 'forestgreen', border = 'white')
})
output$table <- renderTable({
head(data())
})
}
shinyApp(ui, server)
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
