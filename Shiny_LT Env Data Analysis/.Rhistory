for (i in 1:2){
# print(dim(temp_dat))
return_fig <-
return_fig %>%
layout(shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
)
}
return_fig
return_fig <- fig
for (i in 1:length(sun.df$sunrise)){
# print(dim(temp_dat))
return_fig <-
return_fig %>%
layout(shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
)
}
return_fig
return_fig <- fig
for (i in 1:length(sun.df$sunrise)){
# print(dim(temp_dat))
return_fig %>%
layout(shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
)
}
return_fig
return_fig <- fig
for (i in 1:2) {
return_fig <- add_polygons(p, x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
}
for (i in 1:2) {
return_fig <- add_polygons(return_fig, x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
}
return_fig
return_fig <- fig
for (i in 1:2) {
return_fig <- layout(return_fig, shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
)
}
return_fig
return_fig <- fig
for (i in 1:2) {
return_fig <<- layout(return_fig, shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise[i]), x1 = ymd_hms(sun.df$sunset[i]),
y0 = -Inf, y1 = Inf)
)
}
return_fig
return_fig <- layout(return_fig, shapes =
list(type = "rect",
fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
x0 = ymd_hms(sun.df$sunrise), x1 = ymd_hms(sun.df$sunset),
y0 = -Inf, y1 = Inf)
)
return_fig
View(dn.plot)
remove.packages("devtools", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
if(!require("devtools"))
install.packages("devtools")
if(!require("devtools"))
install.packages("devtools", dependencies = T)
install_github("alexology/biomonitoR", ref = "main", build_vignettes = TRUE)
install.packages("devtools")
install.packages("textshaping")
install.packages("fribidi")
install.packages("textshaping")
install.packages("harfbuzz")
devtools::install_github("hadley/devtools")
install.packages("fribidi")
install.packages("textshaping")
install.packages("harfbuzz")
install_github("alexology/biomonitoR", ref = "main", build_vignettes = TRUE)
if(!require("devtools")) install.packages("devtools")
install_github("alexology/biomonitoR", ref = "main", build_vignettes = TRUE)
shiny::runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
tchain <- read.csv("/home/tcanc/Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/prova/")
tchain <- read.csv("/home/tcanc/Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/prova/Ptcan_220911-2_OK.CSV")
depth <- c(1,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,30,35)
tchain.t <- as.data.frame(t(tchain[ ,8:length(tchain)]))
colnames(tchain.t) <- tchain$datetimeisoformat
tchain.t <- gather(tchain.t, datehour, temp, colnames(tchain.t[ ,1:ncol(tchain.t)]))
tchain.t$depth <- rep(depth, length(unique(tchain.t$datehour)))
tchain.t
unique(tchain.t$datehour)
tchain.t$depth <- rep(depth, length(unique(tchain.t$datehour)))
tchain
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
tchain <- read.csv("/home/tcanc/Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/prova/Tchain_mainAggregation_2022-09-15.csv")
depth <- c(1,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,30,35)
tchain.t <- as.data.frame(t(tchain[ ,8:length(tchain)]))
colnames(tchain.t) <- tchain$datetimeisoformat
tchain.t <- gather(tchain.t, datehour, temp, colnames(tchain.t[ ,1:ncol(tchain.t)]))
tchain.t$depth <- rep(depth, length(unique(tchain.t$datehour)))
tchain.t
tchain.t$datehour <- ymd_hms(tchain.t$datehour)
tchain.td <- data.frame()
intersection <- data.frame()
for(i in 1:length(unique(tchain.t$datehour))) {
for(i in 1:length(unique(tchain.t$datehour))) {
tchain.t.sub <- tchain.t[tchain.t$datehour == unique(tchain.t$datehour)[i], ]
tchain.td.1 <- data.frame(datetimeisoformat = unique(tchain.t$datehour)[i],
sesonalThermo = round(thermo.depth(tchain.t.sub$temp, tchain.t.sub$depth, Smin = input$SminThermic, seasonal = T, index = input$indexThermic,
mixed.cutoff = input$mixedCutoffThermic), digits = 2),
maxThermo = round(thermo.depth(tchain.t.sub$temp, tchain.t.sub$depth, Smin = input$SminThermic, seasonal = F, index = input$indexThermic,
mixed.cutoff = input$mixedCutoffThermic), digits = 2)
)
f1 <- approxfun(tchain.t.sub$temp, tchain.t.sub$depth)
pSesonal <- optimize(function(t0) abs(f1(t0) - tchain.td.1$sesonalThermo), interval = range(tchain.t.sub$temp))
pMax <- optimize(function(t0) abs(f1(t0) - tchain.td.1$maxThermo), interval = range(tchain.t.sub$temp))
intersection.1 <- data.frame(datetimeisoformat = unique(tchain.t$datehour)[i],
sesonalThermo = pSesonal$minimum,
maxThermo = pMax$minimum)
tchain.td <- rbind(tchain.td, tchain.td.1)
intersection <- rbind(intersection, intersection.1)
}
for(i in 1:length(unique(tchain.t$datehour))) {
tchain.t.sub <- tchain.t[tchain.t$datehour == unique(tchain.t$datehour)[i], ]
tchain.td.1 <- data.frame(datetimeisoformat = unique(tchain.t$datehour)[i],
sesonalThermo = round(thermo.depth(tchain.t.sub$temp, tchain.t.sub$depth, Smin = .1, seasonal = T, index = F,
mixed.cutoff = 1), digits = 2),
maxThermo = round(thermo.depth(tchain.t.sub$temp, tchain.t.sub$depth, Smin = .1, seasonal = F, index = F,
mixed.cutoff = 1), digits = 2)
)
f1 <- approxfun(tchain.t.sub$temp, tchain.t.sub$depth)
pSesonal <- optimize(function(t0) abs(f1(t0) - tchain.td.1$sesonalThermo), interval = range(tchain.t.sub$temp))
pMax <- optimize(function(t0) abs(f1(t0) - tchain.td.1$maxThermo), interval = range(tchain.t.sub$temp))
intersection.1 <- data.frame(datetimeisoformat = unique(tchain.t$datehour)[i],
sesonalThermo = pSesonal$minimum,
maxThermo = pMax$minimum)
tchain.td <- rbind(tchain.td, tchain.td.1)
intersection <- rbind(intersection, intersection.1)
}
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "blue", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "brown", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = datehour)) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "blue", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "brown", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "blue", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "brown", size = 2)
cc <- scales::seq_gradient_pal("blue", "red", "Lab")(seq(0,1,length.out=100))
cc
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "blue", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "brown", size = 2)
cc <- scales::seq_gradient_pal("blue", "red", "Lab")(seq(0,1,length.out=24))
cc
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "blue", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "brown", size = 2)
cc <- scales::seq_gradient_pal("blue", "red")(seq(0,1,length.out=24))
cc
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "blue", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "brown", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_gradient(name = "category",
low = "blue", high = "red") +
# scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "blue", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "brown", size = 2)
seq(0,1,length.out=24)
cc <- scales::seq_gradient_pal("blue", "red")(seq(0, 1, length.out = 24))
cc <- scales::seq_gradient_pal("#d8b365", "#5ab4ac")(seq(0, 1, length.out = 24))
cc
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "blue", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "brown", size = 2)
cc <- scales::seq_gradient_pal("#d8b365", "#f5f5f5", "#5ab4ac")(seq(0, 1, length.out = 24))
cc <- scales::seq_gradient_pal("red", "blue")(seq(0, 1, length.out = 24))
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "blue", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "brown", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "blue", size = 2) +
annotate("triangle", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "brown", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "blue", size = 2) +
annotate("polygon", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "brown", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "blue", size = 2) +
annotate("star", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "brown", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "white", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "black", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "darkgreen", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "black", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "gold", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "black", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "gold", size = 2) +
annotate("rect", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "black", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "gold", size = 2) +
annotate("rect", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "black", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "gold", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "black", size = 2)
ggplot(data = tchain.t, aes(x = temp, y = depth, colour = as.factor(datehour))) +
geom_point() + geom_line() +
#geom_hline(data = dataThermic()$tchain.td, aes(yintercept = sesonalThermo, colour = as.factor(datetimeisoformat))) +
scale_y_reverse() +
xlab("Temperature (°C)") + ylab("Depth (m)") +
labs(colour = "Time agr") +
scale_colour_manual(values=cc) +
theme_bw() +
annotate("point", x = intersection$sesonalThermo, y = tchain.td$sesonalThermo, colour = "#d8b365", size = 2) +
annotate("point", x = intersection$maxThermo, y = tchain.td$maxThermo, colour = "black", size = 2)
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
tchain <- read.csv("/home/tcanc/Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/prova/Tchain_mainAggregation_2022-09-15.csv")
depth <- c(1,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,30,35)
tchain.t <- as.data.frame(t(tchain[ ,8:length(tchain)]))
colnames(tchain.t) <- tchain$datetimeisoformat
tchain.t
tchain.t <- gather(tchain.t, datehour, temp, colnames(tchain.t[ ,1:ncol(tchain.t)]))
tchain.t$depth <- rep(depth, length(unique(tchain.t$datehour)))
tchain.t$datehour <- ymd_hms(tchain.t$datehour)
tchain.td <- data.frame()
intersection <- data.frame()
tchain <- read.csv("/home/tcanc/Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/prova/Tchain_mainAggregation_2022-09-15.csv")
depth <- c(1,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,30,35)
tchain.t <- as.data.frame(t(tchain[ ,8:length(tchain)]))
colnames(tchain.t) <- tchain$datetimeisoformat
tchain.t <- gather(tchain.t, datehour, temp, colnames(tchain.t[ ,1:ncol(tchain.t)]))
tchain.t$depth <- rep(depth, length(unique(tchain.t$datehour)))
tchain.t$datehour <- ymd_hms(tchain.t$datehour)
tchain.td <- data.frame()
intersection <- data.frame()
for(i in 1:length(unique(tchain.t$datehour))) {
tchain.t.sub <- tchain.t[tchain.t$datehour == unique(tchain.t$datehour)[i], ]
tchain.td.1 <- data.frame(datetimeisoformat = unique(tchain.t$datehour)[i],
sesonalThermo = round(thermo.depth(tchain.t.sub$temp, tchain.t.sub$depth, Smin = .1, seasonal = T, index = F,
mixed.cutoff = 1), digits = 2),
maxThermo = round(thermo.depth(tchain.t.sub$temp, tchain.t.sub$depth, Smin = .1, seasonal = F, index = F,
mixed.cutoff = 1), digits = 2)
)
f1 <- approxfun(tchain.t.sub$temp, tchain.t.sub$depth)
pSesonal <- optimize(function(t0) abs(f1(t0) - tchain.td.1$sesonalThermo), interval = range(tchain.t.sub$temp))
pMax <- optimize(function(t0) abs(f1(t0) - tchain.td.1$maxThermo), interval = range(tchain.t.sub$temp))
intersection.1 <- data.frame(datetimeisoformat = unique(tchain.t$datehour)[i],
sesonalThermo = pSesonal$minimum,
maxThermo = pMax$minimum)
tchain.td <- rbind(tchain.td, tchain.td.1)
intersection <- rbind(intersection, intersection.1)
}
tchain.td
# Convert and create date columns
tchain.td$datetimeisoformat <- ymd_hms(tchain.td$datetimeisoformat)
tchain.td$year <- year(ymd_hms(tchain.td$datetimeisoformat))
tchain.td$month <- month(ymd_hms(tchain.td$datetimeisoformat))
tchain.td$day <- day(ymd_hms(tchain.td$datetimeisoformat))
tchain.td$hour <- hour(ymd_hms(tchain.td$datetimeisoformat))
tchain.td$minute <- minute(ymd_hms(tchain.td$datetimeisoformat))
tchain.td$second <- second(ymd_hms(tchain.td$datetimeisoformat))
tchain.td
tchain <- read.csv("/home/tcanc/Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/prova/Tchain_mainAggregation_2022-09-15.csv")
depth <- c(1,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,30,35)
tchain.t <- as.data.frame(t(tchain[ ,8:length(tchain)]))
colnames(tchain.t) <- tchain$datetimeisoformat
tchain.t <- gather(tchain.t, datehour, temp, colnames(tchain.t[ ,1:ncol(tchain.t)]))
tchain.t$depth <- rep(depth, length(unique(tchain.t$datehour)))
tchain.t$datehour <- ymd_hms(tchain.t$datehour)
tchain.td <- data.frame()
intersection <- data.frame()
for(i in 1:length(unique(tchain.t$datehour))) {
tchain.t.sub <- tchain.t[tchain.t$datehour == unique(tchain.t$datehour)[i], ]
tchain.td.1 <- data.frame(datetimeisoformat = unique(tchain.t$datehour)[i],
sesonalThermo = round(thermo.depth(tchain.t.sub$temp, tchain.t.sub$depth, Smin = .1, seasonal = T, index = F,
mixed.cutoff = 1), digits = 2),
maxThermo = round(thermo.depth(tchain.t.sub$temp, tchain.t.sub$depth, Smin = .1, seasonal = F, index = F,
mixed.cutoff = 1), digits = 2)
)
f1 <- approxfun(tchain.t.sub$temp, tchain.t.sub$depth)
pSesonal <- optimize(function(t0) abs(f1(t0) - tchain.td.1$sesonalThermo), interval = range(tchain.t.sub$temp))
pMax <- optimize(function(t0) abs(f1(t0) - tchain.td.1$maxThermo), interval = range(tchain.t.sub$temp))
intersection.1 <- data.frame(datetimeisoformat = unique(tchain.t$datehour)[i],
sesonalThermo = pSesonal$minimum,
maxThermo = pMax$minimum)
tchain.td <- rbind(tchain.td, tchain.td.1)
intersection <- rbind(intersection, intersection.1)
}
tchain.td$datetimeisoformat <- ymd_hms(paste(tchain.td$datetimeisoformat, " 12:00:00"))
tchain.td$year <- year(paste(tchain.td$datetimeisoformat, " 12:00:00"))
tchain.td
tchain <- read.csv("/home/tcanc/Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/prova/Tchain_mainAggregation_2022-09-15.csv")
depth <- c(1,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,30,35)
tchain.t <- as.data.frame(t(tchain[ ,8:length(tchain)]))
colnames(tchain.t) <- tchain$datetimeisoformat
tchain.t <- gather(tchain.t, datehour, temp, colnames(tchain.t[ ,1:ncol(tchain.t)]))
tchain.t$depth <- rep(depth, length(unique(tchain.t$datehour)))
tchain.t$datehour <- ymd_hms(tchain.t$datehour)
tchain.td <- data.frame()
intersection <- data.frame()
for(i in 1:length(unique(tchain.t$datehour))) {
tchain.t.sub <- tchain.t[tchain.t$datehour == unique(tchain.t$datehour)[i], ]
tchain.td.1 <- data.frame(datetimeisoformat = unique(tchain.t$datehour)[i],
sesonalThermo = round(thermo.depth(tchain.t.sub$temp, tchain.t.sub$depth, Smin = .1, seasonal = T, index = F,
mixed.cutoff = 1), digits = 2),
maxThermo = round(thermo.depth(tchain.t.sub$temp, tchain.t.sub$depth, Smin = .1, seasonal = F, index = F,
mixed.cutoff = 1), digits = 2)
)
f1 <- approxfun(tchain.t.sub$temp, tchain.t.sub$depth)
pSesonal <- optimize(function(t0) abs(f1(t0) - tchain.td.1$sesonalThermo), interval = range(tchain.t.sub$temp))
pMax <- optimize(function(t0) abs(f1(t0) - tchain.td.1$maxThermo), interval = range(tchain.t.sub$temp))
intersection.1 <- data.frame(datetimeisoformat = unique(tchain.t$datehour)[i],
sesonalThermo = pSesonal$minimum,
maxThermo = pMax$minimum)
tchain.td <- rbind(tchain.td, tchain.td.1)
intersection <- rbind(intersection, intersection.1)
}
tchain.td
paste(tchain.td$datetimeisoformat, " 12:00:00")
ymd_hms(paste(tchain.td$datetimeisoformat, " 12:00:00"))
tchain.td
tchain.td$datetimeisoformat
View(tchain)
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
tchain.td$datetimeisoformat <- ymd_hms(paste(tchain.td$datetimeisoformat, " 12:00:00"))
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
tchain <- read.csv("/home/tcanc/Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/prova/Tchain_mainAggregation_2022-09-15_DAILY.csv")
depth <- c(1,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,30,35)
tchain.t <- as.data.frame(t(tchain[ ,8:length(tchain)]))
colnames(tchain.t) <- tchain$datetimeisoformat
tchain.t <- gather(tchain.t, datehour, temp, colnames(tchain.t[ ,1:ncol(tchain.t)]))
tchain.t$depth <- rep(depth, length(unique(tchain.t$datehour)))
tchain.t$datehour <- ymd_hms(tchain.t$datehour)
tchain.td <- data.frame()
intersection <- data.frame()
for(i in 1:length(unique(tchain.t$datehour))) {
tchain.t.sub <- tchain.t[tchain.t$datehour == unique(tchain.t$datehour)[i], ]
tchain.td.1 <- data.frame(datetimeisoformat = unique(tchain.t$datehour)[i],
sesonalThermo = round(thermo.depth(tchain.t.sub$temp, tchain.t.sub$depth, Smin = .1, seasonal = T, index = F,
mixed.cutoff = 1), digits = 2),
maxThermo = round(thermo.depth(tchain.t.sub$temp, tchain.t.sub$depth, Smin = .1, seasonal = F, index = F,
mixed.cutoff = 1), digits = 2)
)
f1 <- approxfun(tchain.t.sub$temp, tchain.t.sub$depth)
pSesonal <- optimize(function(t0) abs(f1(t0) - tchain.td.1$sesonalThermo), interval = range(tchain.t.sub$temp))
pMax <- optimize(function(t0) abs(f1(t0) - tchain.td.1$maxThermo), interval = range(tchain.t.sub$temp))
intersection.1 <- data.frame(datetimeisoformat = unique(tchain.t$datehour)[i],
sesonalThermo = pSesonal$minimum,
maxThermo = pMax$minimum)
tchain.td <- rbind(tchain.td, tchain.td.1)
intersection <- rbind(intersection, intersection.1)
}
tchain.td
tchain.td$datetimeisoformat <- ymd_hms(paste(tchain.td$datetimeisoformat))
tchain.td$year <- year(paste(tchain.td$datetimeisoformat))
tchain.td$month <- month(paste(tchain.td$datetimeisoformat))
tchain.td$day <- day(paste(tchain.td$datetimeisoformat))
tchain.td$hour <- hour(paste(tchain.td$datetimeisoformat))
tchain.td$minute <- minute(paste(tchain.td$datetimeisoformat))
tchain.td$second <- second(paste(tchain.td$datetimeisoformat))
tchain.td
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
shiny::runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
