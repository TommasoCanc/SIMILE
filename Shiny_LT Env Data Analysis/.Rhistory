sample(dat, 30)  == dat
sample(dat, 30)
apply(sample(dat, 30)  == dat)
1:length(dat)
dat[sample(1:length(dat), 4, replace = FALSE)] <- NA
dat
dat<-matrix(runif(100),c(10,10))
dim(dat)
dat[sample(1:length(dat), 30, replace = FALSE)] <- NA
length(which(is.na(dat)))
dat.1<-matrix(runif(100),c(10,10))
dat.2<-matrix(runif(100),c(10,10))
dim(dat.1); dim(dat.2)
dat.1[sample(1:length(dat.1), 30, replace = FALSE)] <- NA
length(which(is.na(dat.1)))
dat.2[sample(1:length(dat.2), 30, replace = FALSE)] <- NA
length(which(is.na(dat.2)))
r.1 <- raster(dat.1)
r.2 <- raster(dat.2)
par(mfrow = c(1, 2))
plot(r.1)
plot(r.2)
r.3 <- r1*r2
r.3 <- r.1*r.2
plot(r.3)
r.1.mask <- mask(r.1, r.3)
par(mfrow = c(1, 2))
plot(r.1)
plot(r.3)
r.2.mask <- mask(r.2, r.3)
plot(r.2)
plot(r.3)
r.2.mask <- mask(r.2, r.3)
par(mfrow = c(1, 3))
plot(r.1)
plot(r.1.mask)
plot(r.3)
plot(r.1, main="r.1")
plot(r.1.mask, main="r.1.mask")
plot(r.3, , main="r.3")
plot(r.2, , main="r.2")
plot(r.2.mask, main="r.1.mask")
plot(r.3, , main="r.3")
r.3$layer
r.3$layer@data
r.3$layer@file
as.data.frame(r.3)
library(biomonitoR)
# Load library
library(biomonitoR)
data(macro_ex)
data_bio <- as_biomonitor(x = macro_ex,
group = "mi", # biotic group of interest. mi = macroinvertebrates
dfref = NULL # custom reference database. NULL to set the default reference dataset
)
data_agr <- aggregate_taxa(data_bio)
# calculate genus and family richness
richness(data_agr, tax_lev = "Taxa")
install_github("alexology/biomonitoR", ref = "main", build_vignettes = TRUE)
library(devtools)
install_github("alexology/biomonitoR", ref = "main", build_vignettes = TRUE)
# Load library
library(biomonitoR)
library(biomonitoR)
dfref_gbif <- get_gbif_taxa_tree(macro_ex[, "Taxa"])
data_asb <- as_biomonitor(macro_ex, dfref = dfref_gbif$taxonomy)
data_agg <- aggregate_taxa(data_asb)
richness(data_agr, tax_lev = "Taxa")
data_bio <- as_biomonitor(macro_ex, dfref = dfref_gbif$taxonomy)
data_agr <- aggregate_taxa(data_asb)
richness(data_agr, tax_lev = "Taxa")
dfref_gbif
vignette("functional", package = "biomonitoR")
# load FD
library( FD )
oglio_traits <- traits_mf
traits_mf
macro_ex$Taxa
runif(0:1, length(macro_ex$Taxa))
macro_ex$Taxa
levels(macro_ex$Taxa)
runif(0:1, levels(macro_ex$Taxa))
runif(0:1, 34)
runif(34)
traits_mi <- data.frame(Taxa = macro_ex$Taxa,
t1 = runif(34),
t2 = runif(34),
t3 = runif(34),
t4 = runif(34),
t5 = runif(34))
head(traits_mi)
head(traits_mf)
rownames(traits_mi) <- traits_mi[ , "Taxa" ]
head(traits_mi)
traits_mi <- traits_mi[ , !colnames(traits_mi) %in% "Taxa" ]
traits_mi
data_bio <- as_biomonitor(x = macro_ex,
group = "mi", # biotic group of interest. mi = macroinvertebrates
dfref = NULL #  NULL to set the default reference dataset
)
data_agr <- aggregate_taxa(x = data_bio)
# prepare the traits database
oglio_traits <- traits_mf
rownames( oglio_traits ) <- oglio_traits[ , "Taxa" ]
oglio_traits <- oglio_traits[ , ! colnames( oglio_traits ) %in% "Taxa" ]
oglio.dist <- gowdis( oglio_traits )
oglio.dist
# select the number of axis according to legendre
select_pcoa_axes( oglio.dist , method = "legendre" )
head(oglio.dist)
assign_traits(
x = data_agr,
trait_db = traits_mi)
data_agr <- aggregate_taxa(x = data_bio)
assign_traits(
x = data_agr,
trait_db = traits_mi)
traits_mi
assign_traits(x = data_agr, trait_db = traits_mi)
data_agr
traits_mi)
traits_mi
assign_traits(x = data_agr)
traits_mi <- data.frame(Taxa = macro_ex$Taxa,
t1 = runif(34),
t2 = runif(34),
t3 = runif(34),
t4 = runif(34),
t5 = runif(34))
head(traits_mi)
data_agr <- aggregate_taxa(x = data_bio, trait_db = traits_mi)
traits_mi <- data.frame(Taxa = macro_ex$Taxa,
t1 = runif(34),
t2 = runif(34),
t3 = runif(34),
t4 = runif(34),
t5 = runif(34))
data_bio <- as_biomonitor(x = macro_ex,
group = "mi", # biotic group of interest. mi = macroinvertebrates
dfref = NULL #  NULL to set the default reference dataset
)
data_agr <- aggregate_taxa(x = data_bio)
assign_traits(x = data_agr, trait_db = traits_mi)
data_ts <- assign_traits(x = data_agr, trait_db = traits_mi)
data_ts[data_ts$Taxa %in% "Beraeidae", 1:5]
col_blocks <- rep(1,5)
col_blocks
f_disp(data_agr,
trait_db = data_ts_av,
nbdim = 2,
type = "F",
col_blocks = col_blocks
)
f_disp(data_agr,
trait_db = traits_mi,
nbdim = 2,
type = "F",
col_blocks = col_blocks)
data_ts_av <- average_traits(data_ts)
data_ts_av <- average_traits(data_ts)
traits_mi <- data.frame(Taxa = macro_ex$Taxa,
t1 = runif(34),
t2 = runif(34),
t3 = runif(34),
t4 = runif(34),
t5 = runif(34))
data_bio <- as_biomonitor(x = macro_ex,
group = "mi", # biotic group of interest. mi = macroinvertebrates
dfref = NULL #  NULL to set the default reference dataset
)
data_agr <- aggregate_taxa(x = data_bio)
data_ts <- assign_traits(x = data_agr, trait_db = traits_mi)
data_ts[data_ts$Taxa %in% "Beraeidae", 1:5]
data_ts_av <- average_traits(data_ts)
data_ts <- assign_traits(x = data_agr, trait_db = traits_mi)
data_ts[data_ts$Taxa %in% "Beraeidae", 1:5]
data_ts_av <- average_traits(data_ts, trait_db = traits_mi)
data_ts <- assign_traits(x = data_agr, trait_db = traits_mi)
data_ts[data_ts$Taxa %in% "Beraeidae", 1:5]
data_ts_av <- average_traits(data_ts,
col_blocks = c(1,1,1,1,1))
data_ts_av <- average_traits(data_ts,
col_blocks = c(1))
data_ts_av <- average_traits(data_ts,
col_blocks = c(1,1))
data_ts_av <- average_traits(data_ts,
col_blocks = NULL)
data_ts_av <- average_traits(data_ts,
col_blocks = c(5))
f_disp(data_agr)
f_disp(data_agr,
trait_db = traits_mi)
f_disp(data_agr,
trait_db = traits_mi,
nbdim = 2,
type = "F",
col_blocks = 5)
data_ts[data_ts$Taxa %in% "Beraeidae", 1:5] # Exemple to
data_ts[data_ts$Taxa %in% "Beraeidae", 1:10] # Exemple to
install.packages("sensorQC")
shiny::runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
depth <- c(1:13)
depth
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain
misCol <- colnames(tchain)[colnames(tchain) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain.var <- tchain[c("datehour", misCol)]
misCol <- colnames(tchain)[colnames(tchain) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain.var <- tchain[c("datehour", misCol)]
head(tchain.var)
tchain.agr <- round(aggregate(. ~ datehour, data = tchain.var, FUN = mean), digits = 3)
aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr.t <- as.data.frame(t(tchain.agr[ ,2:length(tchain.agr)]))
colnames(tchain.agr.t) <- tchain.agr$datehour
tchain.agr.t
tchain.agr.t <- gather(tchain.agr.t, datehour, temp, colnames(tchain.agr.t[ ,1:ncol(tchain.agr.t)]))
tchain.agr.t
tchain.agr.t <- round(tchain.agr.t[ ,2])
tchain.agr.t
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr.t <- as.data.frame(t(tchain.agr[ ,2:length(tchain.agr)]))
colnames(tchain.agr.t) <- tchain.agr$datehour
tchain.agr.t <- gather(tchain.agr.t, datehour, temp, colnames(tchain.agr.t[ ,1:ncol(tchain.agr.t)]))
tchain.agr.t <- round(tchain.agr.t[ ,2], digits = 3)
tchain.agr.t
tchain.depth <- cbind(tchain.agr.t, depth)
tchain.depth
depth <- c(1:13)
tchain.depth <- cbind(tchain.agr.t, depth)
tchain.depth
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain.var <- tchain[c("datehour", misCol)]
head(tchain.var)
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain.var <- tchain[c("datehour", misCol)]
head(tchain.var)
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain
tchain[c("datehour", misCol)]
tchain
tchain[c("datehour", misCol)]
misCol
misCol <- colnames(tchain)[colnames(tchain) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
misCol <- colnames(tchain)[colnames(tchain) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain.var <- tchain[c("datehour", misCol)]
head(tchain.var)
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr.t <- as.data.frame(t(tchain.agr[ ,2:length(tchain.agr)]))
colnames(tchain.agr.t) <- tchain.agr$datehour
tchain.agr.t
tchain.agr.t <- round(tchain.agr.t[ ,2], digits = 3)
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
misCol <- colnames(tchain)[colnames(tchain) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain.var <- tchain[c("datehour", misCol)]
head(tchain.var)
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr.t <- as.data.frame(t(tchain.agr[ ,2:length(tchain.agr)]))
colnames(tchain.agr.t) <- tchain.agr$datehour
tchain.agr.t <- gather(tchain.agr.t, datehour, temp, colnames(tchain.agr.t[ ,1:ncol(tchain.agr.t)]))
tchain.agr.t <- round(tchain.agr.t[ ,2], digits = 3)
tchain.agr.t
tchain.agr.t
tchain.depth <- cbind(tchain.agr.t, depth)
tchain.depth
tchain.depth$datetimeisoformat <- ymd_hms(paste(tchain.depth$datehour, " 12:00:00"))
tchain.agr.t
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr.t <- as.data.frame(t(tchain.agr[ ,2:length(tchain.agr)]))
tchain.agr
colnames(tchain.agr.t) <- tchain.agr$datehour
tchain.agr.t
tchain.depth <- cbind(tchain.agr.t, depth)
tchain.depth
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
misCol <- colnames(tchain)[colnames(tchain) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain.var <- tchain[c("datehour", misCol)]
head(tchain.var)
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr.t <- as.data.frame(t(tchain.agr[ ,2:length(tchain.agr)]))
colnames(tchain.agr.t) <- tchain.agr$datehour
tchain.agr.t <- gather(tchain.agr.t, datehour, temp, colnames(tchain.agr.t[ ,1:ncol(tchain.agr.t)]))
tchain.agr.t <- round(tchain.agr.t[ ,2], digits = 3)
tchain.depth <- cbind(tchain.agr.t, depth)
tchain.depth
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
misCol <- colnames(tchain)[colnames(tchain) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain.var <- tchain[c("datehour", misCol)]
head(tchain.var)
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr.t <- as.data.frame(t(tchain.agr[ ,2:length(tchain.agr)]))
colnames(tchain.agr.t) <- tchain.agr$datehour
tchain.agr.t <- gather(tchain.agr.t, datehour, temp, colnames(tchain.agr.t[ ,1:ncol(tchain.agr.t)]))
tchain.agr.t
tchain.agr.t$temp <- round(tchain.agr.t$temp, digits = 3)
tchain.depth <- cbind(tchain.agr.t, depth)
tchain.depth
tchain.depth$datehour <- ymd_hms(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth
tchain.depth$year <- year(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$month <- month(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$day <- day(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$hour <- hour(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$minute <- minute(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$second <- second(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
misCol <- colnames(tchain)[colnames(tchain) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain.var <- tchain[c("datehour", misCol)]
head(tchain.var)
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr.t <- as.data.frame(t(tchain.agr[ ,2:length(tchain.agr)]))
colnames(tchain.agr.t) <- tchain.agr$datehour
tchain.agr.t <- gather(tchain.agr.t, datehour, temp, colnames(tchain.agr.t[ ,1:ncol(tchain.agr.t)]))
tchain.agr.t$temp <- round(tchain.agr.t$temp, digits = 3)
tchain.depth <- cbind(tchain.agr.t, depth)
tchain.depth$datetimeisoformat <- ymd_hms(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$year <- year(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$month <- month(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$day <- day(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$hour <- hour(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$minute <- minute(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$second <- second(paste(tchain.depth$datehour, " 12:00:00"))
col_order <- c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")
tchain.depth <- tableMult[, c(col_order, dataIn()$misCol, depth)]
tchain.depth <- tchain.depth[, c(col_order, misCol, depth)]
col_order <- c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")
tchain.depth <- tchain.depth[, c(col_order, misCol, depth)]
col_order
misCol
depth
tchain.depth <- tchain.depth[, c(col_order, misCol, "depth")]
tchain.depth
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
misCol <- colnames(tchain)[colnames(tchain) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain.var <- tchain[c("datehour", misCol)]
head(tchain.var)
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr.t <- as.data.frame(t(tchain.agr[ ,2:length(tchain.agr)]))
colnames(tchain.agr.t) <- tchain.agr$datehour
tchain.agr.t <- gather(tchain.agr.t, datehour, temp, colnames(tchain.agr.t[ ,1:ncol(tchain.agr.t)]))
tchain.agr.t$temp <- round(tchain.agr.t$temp, digits = 3)
tchain.depth <- cbind(tchain.agr.t, depth)
tchain.depth$datetimeisoformat <- ymd_hms(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$year <- year(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$month <- month(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$day <- day(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$hour <- hour(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$minute <- minute(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$second <- second(paste(tchain.depth$datehour, " 12:00:00"))
col_order <- c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")
tchain.depth
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
misCol <- colnames(tchain)[colnames(tchain) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain.var <- tchain[c("datehour", misCol)]
head(tchain.var)
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr.t <- as.data.frame(t(tchain.agr[ ,2:length(tchain.agr)]))
colnames(tchain.agr.t) <- tchain.agr$datehour
tchain.agr.t <- gather(tchain.agr.t, datehour, temp, colnames(tchain.agr.t[ ,1:ncol(tchain.agr.t)]))
tchain.agr.t$temp <- round(tchain.agr.t$temp, digits = 3)
tchain.depth <- cbind(tchain.agr.t, depth)
tchain.depth
tchain.depth$datetimeisoformat <- ymd_hms(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth
tchain.depth$year <- year(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$month <- month(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$day <- day(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$hour <- hour(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$minute <- minute(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$second <- second(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth
col_order <- c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")
tchain.depth <- tchain.depth[, c(col_order, "temp", "depth")]
tchain.depth
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
misCol <- colnames(tchain)[colnames(tchain) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain.var <- tchain[c("datehour", misCol)]
head(tchain.var)
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr.t <- as.data.frame(t(tchain.agr[ ,2:length(tchain.agr)]))
colnames(tchain.agr.t) <- tchain.agr$datehour
tchain.agr.t <- gather(tchain.agr.t, datehour, temp, colnames(tchain.agr.t[ ,1:ncol(tchain.agr.t)]))
tchain.agr.t$temp <- round(tchain.agr.t$temp, digits = 3)
tchain.depth <- cbind(tchain.agr.t, depth)
tchain.depth$datetimeisoformat <- ymd_hms(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$year <- year(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$month <- month(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$day <- day(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$hour <- hour(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$minute <- minute(paste(tchain.depth$datehour, " 12:00:00"))
tchain.depth$second <- second(paste(tchain.depth$datehour, " 12:00:00"))
col_order <- c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")
tchain.depth <- tchain.depth[, c(col_order, "temp", "depth")]
ggplot(data=tchain.depth, aes(x=temp,y=depth, colour = datehour)) +
geom_point() + geom_line() + scale_y_reverse() +
theme_bw()
tchain.depth
ggplot(data=tchain.depth, aes(x=temp,y=depth, colour = datetimeisoformat)) +
geom_point() + geom_line() + scale_y_reverse() +
theme_bw()
ggplot(data=tchain.depth, aes(x=temp,y=depth, colour = day)) +
geom_point() + geom_line() + scale_y_reverse() +
theme_bw()
ggplot(data=tchain.depth, aes(x=temp,y=depth, colour = as.factor(day))) +
geom_point() + geom_line() + scale_y_reverse() +
theme_bw()
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
tchain <- read.csv("~/Desktop/Tchain_MainTable_2022-09-07.csv")
head(tchain)
misCol <- colnames(tchain)[colnames(tchain) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
depth <- c(1:13)
tchain$datehour <- cut(ymd_hms(tchain$datetimeisoformat), breaks = "day")
tchain
tchain.var <- tchain[c("datehour", misCol)]
head(tchain.var)
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr
tchain.agr <- round(tchain.agr[ ,misCol], digits = 3
)
tchain.agr
View(tchain.depth)
tchain.agr$datetimeisoformat <- ymd_hms(paste(tchain.agr$datehour, " 12:00:00"))
tchain.agr$datehour
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr <- round(tchain.agr[ ,misCol], digits = 3)
tchain.agr
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr <- round(tchain.agr[ ,c("datehour", misCol)], digits = 3)
tchain.agr <- aggregate(. ~ datehour, data = tchain.var, FUN = mean)
tchain.agr[ ,misCol] <- round(tchain.agr[ ,misCol], digits = 3)
tchain.agr
tchain.agr$datetimeisoformat <- ymd_hms(paste(tchain.agr$datehour, " 12:00:00"))
tchain.agr$year <- year(paste(tchain.agr$datehour, " 12:00:00"))
tchain.agr$month <- month(paste(tchain.agr$datehour, " 12:00:00"))
tchain.agr$day <- day(paste(tchain.agr$datehour, " 12:00:00"))
tchain.agr$hour <- hour(paste(tchain.agr$datehour, " 12:00:00"))
tchain.agr$minute <- minute(paste(tchain.agr$datehour, " 12:00:00"))
tchain.agr$second <- second(paste(tchain.agr$datehour, " 12:00:00"))
tchain.agr
col_order <- c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")
tchain.depth <- tchain.depth[, c(col_order, misCol)]
misCol
col_order
col_order <- c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")
tchain.agr <- tchain.agr[, c(col_order, misCol)]
tchain.agr
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
