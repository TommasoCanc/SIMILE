runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- data.frame(col1 = runif(10),
col2 = NA)
df
df[sapply(df, function(x) all(is.na(x)))] <- NULL
df
runApp()
runApp()
runApp()
runApp()
runApp()
fluidRow(
##############
# Right side #
##############
column(width = 4,
HTML("<h2>Data Input & Management</h2>"),
box(title = "Load Data", collapsible = TRUE, collapsed = TRUE, width = 12,
column(width = 6,
selectInput(inputId = "dataSelection",
label = "Select data type",
choices = c("Chlorophyll" = "chl",
"Ponsel" = "pon"),
selected = "chl"
)),
column(width = 6,
selectInput(inputId = "separator",
label = "Separator",
choices = c(";" = ";",
"," = ",",
"|" = "|"),
selected = ";"
)),
column(width = 12,
fileInput(inputId = "inFiles",
label = "Input Files",
multiple = TRUE,
buttonLabel = "Browse...",
placeholder = "No file selected",
width = "100%"
)),
column(width = 12,
selectInput(inputId = "dateColumn",
label = "Select Date column",
choices = ""
))
),
box(title = "Filter Data", collapsible = TRUE, collapsed = TRUE, width = 12,
column(width = 6,
# Filter year
textInput(inputId = "filterYear", label = "Year"),
# Filter month
textInput(inputId = "filterMonth", label = "Month")
),
column(width = 6,
# Filter day
textInput(inputId = "filterDay", label = "Day"),
# Filter hour
textInput(inputId = "filterHour", label = "Hour")
),
column(width = 12,
checkboxInput(inputId = "checkFiltered",
label = "Use filtered data",
value = FALSE, width = NULL)
)
),
box(title = "Plot sunrise/sunset", collapsible = TRUE, collapsed = TRUE, width = 12,
checkboxInput(inputId = "sunPlot", label = "Plot",
value = FALSE, width = NULL)
)
),
#############
# Left side #
#############
column(width = 8,
HTML("<h2>Summary</h2>"),
htmlOutput("summaryInFiles"),
tabBox(width = 12,
id = "sumData",
tabPanel("Data Table", "Details",
uiOutput("dataTable")),
tabPanel("Filtered Table", "Details",
uiOutput("dataFiltered"),
br(),
uiOutput("downloadFiltered")),
tabPanel("Plot", "Details",
plotOutput("summaryPlot"))
)
)
)
runApp()
library(stringr)
library(ggplot2)
library(suncalc)
library(lubridate)
library(outliers)
library(fdaoutlier)
library(dplyr)
# Setwd
setwd("~/Desktop/SIMILE/Boa_Pallanza_alta frequenza/")
source("Script/Functions/Functions.R")
source("Script/Functions/Conditions.R")
# Load data
df.files <- list.files("./Data/2022-03/")
date <- unique(as.Date(str_extract(df.files, "[0-9]{4}-[0-9]{2}-[0-9]{2}"), format="%Y-%m-%d"))
chl.df <- data.frame()
chl.df.files <- list.files("./Data/2022-05", full.names = TRUE,
pattern = paste0("Chlorophyll-"))
for(i in 1:length(chl.df.files)){ #  length(date)
chl.df.1 <- read.csv(chl.df.files[i],
sep = ";", header = FALSE, skip = 1)  # skip= 1 do not read the first line
chl.df <- rbind(chl.df, chl.df.1)
}; rm(chl.df.1, i)
chl.df <- chl.df[ ,-6] # Remove column 6 because there are only NA
chl.df
head(chl.df)
# Load data
df.files <- list.files("./Data/2022-03/")
date <- unique(as.Date(str_extract(df.files, "[0-9]{4}-[0-9]{2}-[0-9]{2}"), format="%Y-%m-%d"))
# Chlorophyll fix data
chl.df <- data.frame()
chl.df.files <- list.files("./Data/2022-05", full.names = TRUE,
pattern = paste0("Chlorophyll-"))
chl.df.files
i=1
chl.df.1 <- read.csv(chl.df.files[i],
sep = ";", header = FALSE, skip = 1)  # skip= 1 do not read the first line
chl.df.1
df <- lapply(chl.df.files, read_csv) %>% bind_rows
df <- lapply(chl.df.files, read.csv) %>% bind_rows
df
head(df)
df <- lapply(chl.df.files, read.csv(sep = ";")) %>% bind_rows
lapply(chl.df.files, read.csv)
df <- lapply(chl.df.files, read.csv, sep = ";") %>% bind_rows
head(df)
df <- lapply(chl.df.files, read.csv, sep = ",") %>% bind_rows
head(df)
df <- lapply(chl.df.files, read.csv, sep = ";") %>% bind_rows
head(df)
cNames <- colnames(df)
cNames
chl.df <- chl.df[ ,-6] # Remove column 6 because there are only NA
head(chl.df)
chl.df <- lapply(chl.df.files, read.csv, sep = ";") %>% bind_rows
head(chl.df)
cNames <- colnames(df)
# Load data
df.files <- list.files("./Data/2022-03/")
date <- unique(as.Date(str_extract(df.files, "[0-9]{4}-[0-9]{2}-[0-9]{2}"), format="%Y-%m-%d"))
# Chlorophyll fix data
chl.df <- data.frame()
chl.df.files <- list.files("./Data/2022-05", full.names = TRUE,
pattern = paste0("Chlorophyll-"))
for(i in 1:length(chl.df.files)){ #  length(date)
chl.df.1 <- read.csv(chl.df.files[i],
sep = ";", header = FALSE, skip = 1)  # skip= 1 do not read the first line
chl.df <- rbind(chl.df, chl.df.1)
}; rm(chl.df.1, i)
chl.df <- lapply(chl.df.files, read.csv, sep = ";") %>% bind_rows
head(chl.df)
cNames <- colnames(chl.df)
chl.df <- chl.df[ ,-6] # Remove column 6 because there are only NA
head(chl.df)
# Chl_S: Chlorophyll superficial; Chl_D: Chlorophyll deep; PC: Pycochanin; PE: Phycoeritrin
colnames(chl.df) <- cNames
head(chl.df)
chl.df <- chl.df[ ,-6] # Remove column 6 because there are only NA
head(chl.df)
chl.df[ ,-6]
# Load data
df.files <- list.files("./Data/2022-03/")
date <- unique(as.Date(str_extract(df.files, "[0-9]{4}-[0-9]{2}-[0-9]{2}"), format="%Y-%m-%d"))
# Chlorophyll fix data
chl.df <- data.frame()
chl.df.files <- list.files("./Data/2022-05", full.names = TRUE,
pattern = paste0("Chlorophyll-"))
chl.df <- lapply(chl.df.files, read.csv, sep = ";") %>% bind_rows
head(chl.df)
cNames <- colnames(chl.df)
head(chl.df[ ,-6])
chl.df[sapply(chl.df, function(x) all(is.na(x)))] <- NULL
head(chl.df)
colnames(chl.df) <- cNames
cNames
chl.df <- lapply(chl.df.files, read.csv, sep = ";") %>% bind_rows
head(chl.df)
View(chl.df)
rownames(chl.df)
chl.df$date <- rownames(chl.df)
head(chl.df)
chl.df <- lapply(chl.df.files, read.csv, sep = ";") %>% bind_rows
chl.df <- cbind(rownames(chl.df), chl.df)
head(chl.df)
rownames(chl.df) <- NULL
head(chl.df)
chl.df <- lapply(chl.df.files, read.csv, sep = ";") %>% bind_rows
head(chl.df)
chl.df <- lapply(chl.df.files, read.csv, sep = ",") %>% bind_rows
head(chl.df)
chl.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = ";") %>% bind_rows
head(chl.df)
chl.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = ",") %>% bind_rows
head(chl.df)
my_data <- read.delim(file.choose())
my_data
head(my_data)
substring(my_data,1, nchar(my_data)-1)
nchar(my_data)
head(my_data)
nchar(my_data)[1]
my_data[1]
my_data[1,]
substring(my_data[1,])
nchar(my_data)[1,]
nchar(my_data[1,])
substring(my_data[1,],1, nchar(my_data[1,])-1)
substring(my_data[,1],1, nchar(my_data[,1])-1)
read.csv(substring(my_data[,1],1, nchar(my_data[,1])-1), sep = ";")
read.csv(substring(my_data[,1],1, nchar(my_data[,1])-1), sep = ";")
substring(my_data[,1],1, nchar(my_data[,1])-1)
read.table(substring(my_data[,1],1, nchar(my_data[,1])-1), sep = ";")
my_data <- substring(my_data[,1],1, nchar(my_data[,1])-1)
read.csv(my_data, sep = ";")
read.delim(my_data, sep = ";")
my_data <- read.delim(file.choose())
my_data <- substring(my_data[,1],1, nchar(my_data[,1])-1)
my_data
write.csv(my_data, "~/Desktop/data.csv", row.names = F)
my_data
head(my_data)
chl.df <- read.csv("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv")
View(chl.df)
runApp('~/Desktop/Rogora_Shiny/Rogora_Shiny')
path_list <- as.list(/home/tcanc/Desktop/Rogora_Shiny/Rogora_Shiny/prova)
runApp('~/Desktop/Rogora_Shiny/Rogora_Shiny')
runApp('~/Desktop/Rogora_Shiny/Rogora_Shiny')
# Remove columns containing only NA values
mainTable.df[sapply(mainTable.df, function(x) all(is.na(x)))] <- NULL
runApp('~/Desktop/Rogora_Shiny/Rogora_Shiny')
shiny::runApp()
runApp()
mainTable.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = input$separator) %>% bind_rows
mainTable.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = ",") %>% bind_rows
head(mainTable.df)
which(colnames(mainTable.df) == "datetimeisoformat")
dateCol <- which(colnames(mainTable.df) == "datetimeisoformat")
dateCol
mainTable.df[dateCol]
mainTable.df[dateCol] <- ymd_hms(mainTable.df[dateCol])
mainTable.df[dateCol]
mainTable.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = ",") %>% bind_rows
head(mainTable.df)
dateCol <- which(colnames(mainTable.df) == "datetimeisoformat")
mainTable.df[dateCol] <- ymd_hms(mainTable.df[,dateCol])
head(mainTable.df)
mainTable.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = ",") %>% bind_rows
head(mainTable.df)
runApp()
runApp()
runApp()
colnames(which(colnames(mainTable.df) == "datetimeisoformat"))
which(colnames(mainTable.df) == "datetimeisoformat")
dateCol <- which(colnames(mainTable.df) == "datetimeisoformat")
dateCol
mainTable.df$datetimeisoformat <- ymd_hms(mainTable.df$datetimeisoformat)
mainTable.df$year <- year(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$month <- month(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$day <- day(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$hour <- hour(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$minute <-  minute(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$second <-  second(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df
# column different form the temporal
colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "day", "hour", "minute", "second")
# column different form the temporal
colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "day", "hour", "minute", "second")]
# column different form the temporal
colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
mainTable.df[, c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second",
misCol)]
runApp()
runApp()
runApp()
runApp()
mainTable.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = ",") %>% bind_rows
head(mainTable.df)
dateCol <- which(colnames(mainTable.df) == "datetimeisoformat")
colnames(which(colnames(mainTable.df) == "datetimeisoformat")) <- "datetimeisoformat"
dateCol <- which(colnames(mainTable.df) == "datetimeisoformat")
colnames(which(colnames(mainTable.df) == "datetimeisoformat")) <- "datetimeisoformat"
mainTable.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = ",") %>% bind_rows
head(mainTable.df)
dateCol <- which(colnames(mainTable.df) == "datetimeisoformat")
colnames(which(colnames(mainTable.df) == "datetimeisoformat")) <- "datetimeisoformat"
mainTable.df
dateCol
mainTable.df$datetimeisoformat <- ymd_hms(mainTable.df$datetimeisoformat)
mainTable.df$year <- year(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$month <- month(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$day <- day(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$hour <- hour(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$minute <-  minute(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$second <-  second(ymd_hms(mainTable.df$datetimeisoformat))
# column different form the temporal
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
# Not in
"%ni%" <- Negate("%in%")
# column different form the temporal
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
mainTable.df <- mainTable.df[, c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second",
misCol)]
head(mainTable.df)
x = mainTable.df
y <- x[grepl(paste0("cd", condition), names(x))]
condition = 1
y <- x[grepl(paste0("cd", condition), names(x))]
y
cond.1 <- data.frame(ifelse(!is.na(x) == TRUE, 1, 0))
cond.1
x[ ,misCol]
cond.1 <- data.frame(ifelse(!is.na(x[ ,misCol]) == TRUE, 1, 0))
cond.1
runApp()
runApp()
# Chl_S: Chlorophyll superficial; Chl_D: Chlorophyll deep; PC: Pycochanin; PE: Phycoeritrin
colnames(dataIn()) <- c("datetimeisoformat", "Chl_S", "Chl_D", "PC", "PE")
runApp()
# Update select input with column names
updateSelectInput(session, inputId = "selectColumn",
label = 'Select date column',
choices  = colnames(mainTable.df))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mainTable.df[,c("datetimeisoformat")]
mainTable.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = ",") %>% bind_rows
dateCol <- which(colnames(mainTable.df) == "datetimeisoformat")
mainTable.df[,c("datetimeisoformat")]
head(mainTable.df)
mainTable.df[,c("datetimeisoformat", "Ch1.S")]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinyWidgets)
library(dplyr)
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("type_select", "What do you want to select?",
c("Rows" = "Rows",
"Columns" = "Columns")),
conditionalPanel(
condition = "input.type_select == 'Columns'",
uiOutput("picker"),
actionButton("view", "View Selection")
)
),
# Show a plot of the generated distribution
mainPanel(
h2('Mydata'),
DT::dataTableOutput("table"),
)
)
)
library(shiny)
library(DT)
server <- function(session, input, output) {
data <- reactive({
iris
})
output$picker <- renderUI({
pickerInput(inputId = 'pick',
label = 'Choose',
choices = colnames(data()),
options = list(`actions-box` = TRUE),multiple = T)
})
datasetInput <- eventReactive(input$view,{
datasetInput <- data() %>%
select(input$pick)
return(datasetInput)
})
output$table <- DT::renderDataTable(server = FALSE,{
if(input$type_select == "Rows"){
datatable(
data(),
selection = "none",
filter="top",
rownames = FALSE,
extensions = c("Buttons", "Select"),
options = list(
select = TRUE,
dom = 'Blfrtip',
buttons =
list('copy', 'print', list(
extend = 'collection',
buttons = list(
list(extend = 'csv', filename = "File", title = NULL,
exportOptions = list(modifier = list(selected = TRUE))),
list(extend = 'excel', filename = "File", title = NULL,
exportOptions = list(modifier = list(selected = TRUE)))),
text = 'Download'
))
),
class = "display"
)
}else{
datatable(
datasetInput(),
filter="top",
rownames = FALSE,
extensions = 'Buttons',
options = list(
dom = 'Blfrtip',
buttons =
list('copy', 'print', list(
extend = 'collection',
buttons = list(
list(extend = 'csv', filename = "File", title = NULL),
list(extend = 'excel', filename = "File", title = NULL)),
text = 'Download'
))
),
class = "display"
)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/.active-rstudio-document")
library("shiny")
library("shinyWidgets")
ui <- fluidPage(
pickerInput(
inputId = "somevalue",
label = "A label",
choices = c("a", "b", "c", "d"),
selected = NULL,
multiple = TRUE,
options = pickerOptions(maxOptions = 1)
),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderPrint({
input$somevalue
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
