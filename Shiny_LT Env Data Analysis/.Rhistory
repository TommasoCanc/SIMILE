cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
cd1
cd1[,1]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
myplots <- vector('list', length(y))
for (i in 1:length(y)) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
myplots[[i]] <- local({
i <- i
p1 <- ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
}
myplots
myplots <- vector('list', length(y))
for (i in 1:length(y)) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
myplots[[i]] <- local({
#i <- i
p1 <- ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
}
myplots
myplots[[1]]
length(y)
myplots <- vector('list', length(y))
for (i in 1:length(y)) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
myplots[[i]] <- local({
i <- i
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
}
myplots
myplots <- vector('list', length(y))
i=1
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
myplots[[i]] <- local({
i <- i
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
myplots
i=2
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
myplots[[i]] <- local({
i <- i
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
myplots[[2]]
myplots[[1]]
myplots <- vector('list', length(y))
for (i in 1:length(y)) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
myplots[[i]] <- local({
i <- i
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
# geom_point(data = cd0, aes(x = x, y = cd0[,i]),
#            shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
}
myplots
myplots <- vector('list', length(y))
for (i in 1:length(y)) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
myplots[[i]] <-
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
}
myplots
# random example data as no reproducible example was given
df <- data.frame(
real = sample(1:4, 20, TRUE),
one = runif(20),
two = runif(20),
three = runif(20))
df
# graphics paramaters so we see all at once
par(mfrow = c(3,1), mar = c(2, 2, 1, 1))
for(column in 2:4)
boxplot(df[[column]] ~ df$real)
shiny::runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
library(shiny)
runGitHub(repo = 'SIMILE', username = 'TommasoCanc', ref="main", subdir = "Shiny_LT Env Data Analysis")
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
mainTable.df <- read.csv("./Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv")
head(mainTable.df)
mainTable.df[sapply(mainTable.df, function(x) all(is.na(x)))] <- NULL
# Convert in numeric
for(i in 2:ncol(mainTable.df)){mainTable.df[ ,i] <- as.numeric(mainTable.df[ ,i])}
# Convert and create date columns
mainTable.df$datetimeisoformat <- ymd_hms(mainTable.df$datetimeisoformat)
mainTable.df$year <- year(ymd_hms(mainTable.df$datetimeisoformat))
library(lubridate)
mainTable.df$datetimeisoformat <- ymd_hms(mainTable.df$datetimeisoformat)
mainTable.df$year <- year(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$month <- month(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$day <- day(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$hour <- hour(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$minute <-  minute(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$second <-  second(ymd_hms(mainTable.df$datetimeisoformat))
head(mainTable.df)
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
source("./Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/Functions/Functions_v2.R")
# Column different form date are filtered
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
misCol
# Reorder main dataset
mainTable.df <- mainTable.df[ ,c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second",
misCol)]
as.character(min(mainTable.df$datetimeisoformat))
as.character(max(mainTable.df$datetimeisoformat))
mainInfo.df <- data.frame(
timePeriodMin = as.character(min(mainTable.df$datetimeisoformat)),
timePeriodMax = as.character(max(mainTable.df$datetimeisoformat)),
nOfRow = nrow(mainTable.df)
)
mainInfo.df
min(mainTable.df$datetimeisoformat)
min(ymd_hms(mainTable.df$datetimeisoformat))
as.character(min(ymd_hms(mainTable.df$datetimeisoformat)))
shiny::runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
head(mainTable.df)
chl.means <- aggregate(cbind(Ch1.S, Ch2.D, PC3, PE4) ~ hour, mainTable.df, mean)
head(chl.means)
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
head(mainTable.df)
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
mainTable.agr <- aggregate(cbind(misCol) ~ hour, mainTable.df, mean)
misCol
mainTable.agr <- aggregate(cbind(mainTable.df[ ,misCol]) ~ hour, mainTable.df, mean)
mainTable.df[ ,misCol]
mainTable.agr <- aggregate(cbind(misCol) ~ hour, mainTable.df, mean)
mainTable.agr <- aggregate(cbind(Ch1.S, Ch2.D, PC3, PE4) ~ hour, mainTable.df, mean)
misCol
mainTable.agr <- aggregate(cbind(misCol[1]) ~ hour, mainTable.df, mean)
mainTable.agr <- aggregate(mainTable.df[misCol] ~ hour, mainTable.df, mean)
as.formula(paste0(cbind(Ch1.S, Ch2.D, PC3, PE4) ~ hour + , mainTable.df))
as.formula(paste0(cbind(Ch1.S, Ch2.D, PC3, PE4), "~", hour , mainTable.df))
as.formula(paste0(cbind(misCol), "~", hour , mainTable.df))
misCol
as.formula(paste0(misCol, "~", hour , mainTable.df))
paste0(misCol, "~", hour , mainTable.df)
paste0(cbind(misCol, "~", hour)
)
as.formula(paste0(cbind(misCol), "~", hour))
misCol
paste0(cbind(misCol), "~", "hour")
paste0(cbind(misCol), "~ hour")
as.formula(paste0(cbind(misCol), "~ hour"))
formula(paste0(cbind(misCol), "~ hour"))
formula(paste(cbind(misCol), "~ hour", collapse = " "))
as.formula(paste(cbind(misCol), "~ hour", collapse = " "))
as.formula(paste(cbind(misCol), "~ hour"))
as.formula(paste(cbind(misCol), "~ hour"))
paste(cbind(misCol), "~ hour")
lapply(paste(cbind(misCol), "~ hour"), as.formula)
mainTable.agr <- aggregate(lapply(paste(cbind(misCol), "~ hour"), as.formula), mainTable.df, mean)
mainTable.agr <- aggregate(lapply(paste(cbind(misCol), "~ hour"), as.formula), mean)
mainTable.agr <- aggregate(lapply(paste(cbind(misCol), "~ hour"), as.formula)[[1]], mainTable.df, mean)
mainTable.agr
lapply(paste(cbind(misCol), "~ hour"), as.formula)
chl.means
mainTable.agr <- aggregate(unlist(lapply(paste(cbind(misCol), "~ hour")), as.formula)[[1]], mainTable.df, mean)
unlist(lapply(paste(cbind(misCol), "~ hour")), as.formula)
unlist(lapply(paste(cbind(misCol), "~ hour"), as.formula))
lapply(paste(cbind(misCol), "~ hour"), as.formula)
a <- lapply(paste(cbind(misCol), "~ hour"), as.formula)
unlist(a)
lapply(paste(cbind(misCol), "~ hour"), formula)
mainTable.agr <- aggregate(lapply(paste(cbind(misCol), "~ hour"), formula), mainTable.df, mean)
data.agr <- mainTable.df[ ,misCol]
data.agr
data.agr <- mainTable.df[ ,c(misCol. "hour")]
data.agr <- mainTable.df[ ,c(misCol, "hour")]
head(data.agr)
mainTable.agr <- aggregate(data.agr[1:4] ~ hour, data.agr, mean)
mainTable.agr <- aggregate(data.agr ~ hour, data.agr, mean)
mainTable.agr <- aggregate(data.agr[1:4] ~ data.agr[5], mean)
mainTable.agr <- aggregate(cbind(data.agr[1:4]) ~ hour, data.agr, mean)
mainTable.agr <- aggregate(cbind(colnames(data.agr[1:4])) ~ hour, data.agr, mean)
aggregate(cbind(b = misCol) ~ cbind(a = c[, "hour"]), data.agr, FUN = mean)
aggregate(cbind(b = misCol) ~ cbind(a = "hour"), data.agr, FUN = mean)
rep(hour, length(misCol))
mainTable.agr <- aggregate(cbind(misCol) ~ rep(hour, length(misCol)), data.agr, mean)
mainTable.agr <- aggregate(cbind(misCol) ~ rep("hour", length(misCol)), data.agr, mean)
rep("hour", length(misCol))
x <- data.frame(cond1 = sample(letters[1:3], 500, replace=TRUE),
cond2 = sample(LETTERS[1:7], 500, replace = TRUE),
cond3 = sample(LETTERS[1:4], 500, replace = TRUE),
value1 = rnorm(500),
value2 = rnorm(500))
aggregate(cbind(value1,value2) ~ cond1 + cond2, data = x, FUN=sum)
c1 <- c("cond1","cond2","cond3")
v1 <- c("value1","value2")
aggregate(x[v1],by=x[c1],FUN=sum)
mainTable.df <- read.csv("./Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv")
source("./Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/Functions/Functions_v2.R")
for(i in 2:ncol(mainTable.df)){mainTable.df[ ,i] <- as.numeric(mainTable.df[ ,i])}
# Convert and create date columns
mainTable.df$datetimeisoformat <- ymd_hms(mainTable.df$datetimeisoformat)
mainTable.df$year <- year(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$month <- month(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$day <- day(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$hour <- hour(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$minute <-  minute(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$second <-  second(ymd_hms(mainTable.df$datetimeisoformat))
# Column different form date are filtered
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
# Reorder main dataset
mainTable.df <- mainTable.df[ ,c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second",
misCol)]
mainInfo.df <- data.frame(
timePeriodMin = as.character(min(mainTable.df$datetimeisoformat)),
timePeriodMax = as.character(max(mainTable.df$datetimeisoformat)),
nOfRow = nrow(mainTable.df)
)
c1 <- misCol
v1 <- "hour"
aggregate(mainTable.df[v1], by=mainTable.df[c1],FUN=mean)
aggregate(. ~ hour, data = mainTable.df, FUN = mean)
head(mainTable.df)
data.agr <- mainTable.df[ ,c(misCol, "hour")]
head(data.agr)
aggregate(. ~ hour, data = data.agr, FUN = mean)
data.agr <- mainTable.df[ ,c("hour", misCol)]
aggregate(. ~ hour, data = data.agr, FUN = mean)
gc()
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
mainTable.df$datehour <- cut(as.POSIXct(mainTable.df$datetimeisoformat, format= "%Y-%m-%dT%H:%M"),
breaks="hour") # We can substitute with day
mainTable.df <- read.csv("./Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv")
source("./Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/Functions/Functions_v2.R")
# Convert in numeric
for(i in 2:ncol(mainTable.df)){mainTable.df[ ,i] <- as.numeric(mainTable.df[ ,i])}
mainTable.df$datetimeisoformat <- ymd_hms(mainTable.df$datetimeisoformat)
mainTable.df$year <- year(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$month <- month(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$day <- day(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$hour <- hour(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$minute <-  minute(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$second <-  second(ymd_hms(mainTable.df$datetimeisoformat))
# Column different form date are filtered
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
mainTable.df <- mainTable.df[ ,c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second",
misCol)]
mainTable.df$datehour <- cut(as.POSIXct(mainTable.df$datetimeisoformat, format= "%Y-%m-%dT%H:%M"),
breaks="hour") # We can substitute with day
head(mainTable.df)
data.agr <- mainTable.df[ ,c("datehour", misCol)]
aggregate(. ~ datehour, data = data.agr, FUN = mean)
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
mainTableAgr <-  mainTable.df
mainTableAgr$datehour <- cut(as.POSIXct(mainTable.df$datetimeisoformat, format= "%Y-%m-%dT%H:%M"),
breaks = "hour") # We can substitute with day
data.agr <- mainTableAgr[ ,c("datehour", misCol)]
data.agr
# Data aggregation Table
mainTable.agr <- round(aggregate(. ~ datehour, data = data.agr, FUN = mean), digits = 2)
# Data aggregation Table
mainTable.agr <- round(aggregate(. ~ as.numeric(datehour), data = data.agr, FUN = mean), digits = 2)
mainTable.agr
aggregate(. ~ datehour, data = data.agr, FUN = mean)
mainTable.agr[ ,2:ncol(mainTable.agr)] <- round(mainTable.agr[ ,2:ncol(mainTable.agr)], digits = 2)
mainTable.agr
# Data aggregation Table
mainTable.agr <- aggregate(. ~ datehour, data = data.agr, FUN = mean)
mainTable.agr[ ,2:ncol(mainTable.agr)] <- round(mainTable.agr[ ,2:ncol(mainTable.agr)], digits = 2)
mainTable.agr
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
a <- read.csv("./Desktop/chl_2022-06-23.csv")
cd1 <-a["cond.mult" == 1, ]
cd0 <-a["cond.mult" == 0, ]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
cd1
a["cond.mult" == 1, ]
a
cd1 <- a["cond.mult" == 1, ]
cd1
cd1 <- a[which(a$cond.mult == 1), ]
cd1
cd0 <- a[which(a$cond.mult == 0), ]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0),
shape = 21, color = "red") +
xlab("") + ylab("") + theme_bw()
View(cond.plot)
View(cond.plot)
a$x <- 1:nrow(a)
cd1 <- a[which(a$cond.mult == 1), ]
cd0 <- a[which(a$cond.mult == 0), ]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0),
shape = 21, color = "red") +
xlab("") + ylab("") + theme_bw()
cd1
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0),
shape = 21, color = "red")
View(cond.plot)
shiny::runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
x <- read.csv("./Desktop/chl_2022-06-28.csv")
head(x)
View(x)
View(cond.plot)
condition = 1
y <- x[grepl(paste0("c", condition, "_"), names(x))]
y
names(x)
paste0("c", condition, "_")
condition = 2
y <- x[grepl(paste0("c", condition, "_"), names(x))]
y
names(x)
x[y[i] == 1, ]
i=1
x[y[i] == 1, ]
names(cd1)
cd1 <-x[y[i] == 1, ]
names(cd1)
colnames(y)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
head(cd1)
cd1[,i]
length(y)
View(cond.plot)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
cd1
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
y <- x[grepl(paste0("c", condition, "_"), names(x))]
x$x <- 1:nrow(x)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
y <- x[grepl(paste0("c2_"), names(x))]
y
# Lobraries
library(jsonlite)
library(progress)
library(xlsx)
# Load Tardigrada
#taxa <- read.csv("/media/ambiun1091663/Tos_Tom_1tb/googledrive/Taxa Ale/WORMS/Decapoda.csv", sep = ",")
taxa <- read.csv("/home/tcanc/Downloads/Aphiamissing_tommaso.csv", sep = ";")
head(taxa)
i=19
worms.tab <- data.frame() # Dataframe with valid records
worms.error <- data.frame() # Dataframe for missing taxa in WORMS
worms.multiple <- data.frame() # If we find multiple results with a taxon (-999)
taxa.url <- gsub(" ", "%20", taxa$Tax.name[i])
url.aphia <- fromJSON(paste0("https://www.marinespecies.org/rest/AphiaIDByName/", taxa.url,"?marine_only=false"))  # marine_only = F in this way we not consider only marine taxa
url.aphia
x <- read.csv("./Desktop/chl_2022-06-28.csv")
head(x)
y <- x[grepl(paste0("c2_"), names(x))]
x <- x[, c(dataIn()$misCol)]
misCol <- colnames(x)[colnames(x) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
misCol <- colnames(x)[colnames(x) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
x <- x[, c(misCol)]
x
x <- cbind(x, y)
head(x)
misCol
x <- read.csv("./Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv")
mainTable.df <- x
# Remove columns containing only NA values
mainTable.df[sapply(mainTable.df, function(x) all(is.na(x)))] <- NULL
for (i in 2:ncol(mainTable.df)) {
mainTable.df[, i] <- as.numeric(mainTable.df[, i])
}
# Convert and create date columns
mainTable.df$datetimeisoformat <- ymd_hms(mainTable.df$datetimeisoformat)
mainTable.df$year <- year(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$month <- month(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$day <- day(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$hour <- hour(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$minute <- minute(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$second <- second(ymd_hms(mainTable.df$datetimeisoformat))
head(x)
head(mainTable.df)
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
misCol
x.1 <- read.csv("./Desktop/chl_2022-06-28.csv")
head(x.1)
x.1[ ,c(misCol)]
head(x.1)
# Reorder main dataset
x.condPlotTot <- x.1[ ,c(misCol, "cond.mult")]
head(x.condPlotTot)
cd1 <-x.condPlotTot[cond.mult$cond.mult == 1, ]
cd1 <-x.condPlotTot[x.condPlotTot$cond.mult == 1, ]
cd1
cd0 <- x.condPlotTot[x.condPlotTot$cond.mult == 0, ]
x.condPlotTot$x <- 1:nrow(x.condPlotTot)
x.condPlotTot <- x.1[ ,c(misCol, "cond.mult")]
x.condPlotTot$x <- 1:nrow(x.condPlotTot)
head(x.condPlotTot)
misCol
head(x.condPlotTot)
names(cd1)
cd1 <- x.condPlotTot[x.condPlotTot$cond.mult == 1, ]
cd0 <- x.condPlotTot[x.condPlotTot$cond.mult == 0, ]
names(cd1)
i=1
cd1 <- cd1[i]
cd1
cd0 <- cd0[i]
cd0
cd1 <- x.condPlotTot[x.condPlotTot$cond.mult == 1, ]; cd1 <- cd1[,c(i, "x")]
colnames(cd1)[i]
cd1[ ,(colnames(cd1)[i], "x")]
cd1[ , c(colnames(cd1)[i], "x")]
cd1 <- x.condPlotTot[x.condPlotTot$cond.mult == 1, ]; cd1 <- cd1[ , c(colnames(cd1)[i], "x")]
cd0 <- x.condPlotTot[x.condPlotTot$cond.mult == 0, ]; cd0 <- cd0[ , c(colnames(cd0)[i], "x")]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
i
i
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
