geom_point(data = x[y$Chl_D == 0, ], aes(x = x, y = Chl_D), shape = 21, color = "red") +
xlab("") + ylab("Chorophyll deep") + theme_bw()
p3 <- ggplot(x)+
geom_point(data = x[y$PC == 1, ], aes(x = x, y = PC), shape = 21, color = "blue") +
geom_point(data = x[y$PC == 0, ], aes(x = x, y = PC), shape = 21, color = "red") +
xlab("") + ylab("Phycocyanin") + theme_bw()
p4 <- ggplot(x)+
geom_point(data = x[y$PE == 1, ], aes(x = x, y = PE), shape = 21, color = "blue") +
geom_point(data = x[y$PE == 0, ], aes(x = x, y = PE), shape = 21, color = "red") +
xlab("") + ylab("Phycoerythrin") + theme_bw()
return(gridExtra::grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2, top = title))
}
# day and night plot
dn.plot <- function(x, latitude = 45.9283, longitude = 8.5554, title = NA){
x$daySun <- as.character(cut(ymd_hms(x$datetimeisoformat), breaks="day"))
x$hourSun <- as.character(cut(ymd_hms(x$datetimeisoformat), breaks="hour"))
day.night <- data.frame()
sun.df <- data.frame()
for(i in 1:length(unique(x$daySun))){
sun <- getSunlightTimes(
date = seq.Date(as.Date(as.character(unique(x$daySun)[i])), as.Date(as.character(unique(x$daySun)[i])),
by = 1),
keep = c("sunrise", "sunset"),
lat = latitude,
lon = longitude,
tz = "UTC") # UTC: Coordinated Universal Time
sun$sunrise <- as.character(ymd_hms(sun$sunrise))
sun$sunset <- as.character(ymd_hms(sun$sunset))
x.sub <- x[x$daySun %in% unique(x$daySun)[i], ]
day.night <- rbind(day.night, x.sub)
sun.df <- rbind(sun.df, sun)
}
misCol <- colnames(x)[colnames(x) %ni% c("datetimeisoformat", "year", "month", "day",
"hour", "minute", "second",
"daySun", "hourSun")]
myplots <- vector('list', length(misCol))
for (i in 1:length(misCol)) {
myplots[[i]] <- local({
i <- i
p1 <- ggplot()+
#day
geom_rect(data = sun.df, aes(xmin = ymd_hms(sunrise), xmax = ymd_hms(sunset), ymin = -Inf, ymax = Inf),
color = "#FF9900", fill = "#FFCC00", alpha = .4) +
geom_point(data = day.night, aes(x = ymd_hms(datetimeisoformat),
y = day.night[ ,misCol[i]]), cex = .2) +
xlab("") + ylab(misCol[i]) +
labs(fill = "Day/Night") +
theme_bw()
})
}
return(gridExtra::grid.arrange(grobs = myplots, nrow = 2, ncol = 2, top = title))
}
########################################################
# Author: Tommaso Cancellario                          #
# Script Title: Conditions                             #
# Reviewer:                                            #
# Creation: 2022 - 05 - 18                             #
# Last update: 2022 - 06 - 12                          #
########################################################
# # column different form the temporal
# misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
# Checking condition
# Condition 1. Check if exists rows contain NA values
cond.1.fn <- function(x){
cond.1 <- data.frame(ifelse(!is.na(x) == TRUE, 1, 0))
for(j in 1:ncol(x)){colnames(cond.1)[j] <- paste0("c1_", colnames(x)[j])}
return(cond.1)
}
# Condition 2. Check if exists rows contain 0
cond.2.fn <- function(x){
cond.2 <- data.frame(ifelse(x != 0, 1, 0))
for(j in 1:ncol(x)){colnames(cond.2)[j] <- paste0("c2_", colnames(x)[j])}
return(cond.2)
}
# Condition 3. Check values outside specific thresholds
cond.3.fn <- function(x,
t1.min = NA,
t1.max = NA,
t2.min = NA,
t2.max = NA,
t3.min = NA,
t3.max = NA,
t4.min = NA,
t4.max = NA,
inequality = ">") {
if(inequality == ">"){
cond.3 <- data.frame(
t1 = ifelse(x[ ,1] > t1.min & x[ ,1] < t1.max, 1, 0),
t2 = ifelse(x[ ,2] > t2.min & x[ ,2] < t2.max, 1, 0),
t3 = ifelse(x[ ,3] > t3.min & x[ ,3] < t3.max, 1, 0),
t4 = ifelse(x[ ,4] > t4.min & x[ ,4] < t4.max, 1, 0)
)
}
if(inequality == ">="){
cond.3 <- data.frame(
t1 = ifelse(x[ ,1] >= t1.min & x[ ,1] <= t1.max, 1, 0),
t2 = ifelse(x[ ,2] >= t2.min & x[ ,2] <= t2.max, 1, 0),
t3 = ifelse(x[ ,3] >= t3.min & x[ ,3] <= t3.max, 1, 0),
t4 = ifelse(x[ ,4] >= t4.min & x[ ,4] <= t4.max, 1, 0)
)
}
for(j in 1:ncol(x)){colnames(cond.3)[j] <- paste0("c3_", colnames(x)[j])}
return(cond.3)
}
# Condition 4. Check values outside 3 standard deviation.
cond.4.fn <- function(x) {
colMean <- x %>% summarise_if(is.numeric, mean)
colSd <- x %>% summarise_if(is.numeric, sd)
tMax <- colMean + (3*colSd)
tMin <- colMean - (3*colSd)
cond.4 <- data.frame(row.names = 1:nrow(x))
for(i in 1:ncol(x)){
cond.4.1 <- data.frame(ifelse(x[ ,i] > tMin[ ,i] & x[ ,i] < tMax[ ,i], 1, 0))
cond.4 <- cbind(cond.4, cond.4.1)
}
for(j in 1:ncol(x)){colnames(cond.4)[j] <- paste0("c4_", colnames(x)[j])}
return(cond.4)
}
# Condition 5 Median Absolute Deviation
cond.5.fn <- function(x){
colMean <- x %>% summarise_if(is.numeric, mean)
colMad <- x %>% summarise_if(is.numeric, mad)
tMax <- colMean + (3*colMad)
tMin <- colMean - (3*colMad)
cond.5 <- data.frame(row.names = 1:nrow(x))
for(i in 1:ncol(x)){
cond.5.1 <- data.frame(ifelse(x[ ,i] > tMin[ ,i] & x[ ,i] < tMax[ ,i], 1, 0))
cond.5 <- cbind(cond.5, cond.5.1)
}
for(j in 1:ncol(x)){colnames(cond.5)[j] <- paste0("c5_", colnames(x)[j])}
return(cond.5)
}
# Condition 6 outlier function
cond.6.fn <- function(x){
out.high <- outlier(x, opposite = FALSE)
out.low <- outlier(x, opposite = TRUE)
cond.6 <- data.frame(row.names = 1:nrow(x))
for(i in 1:ncol(x)){
cond.6.1 <- data.frame(ifelse(x[ ,i] > out.low[i] & x[ ,i] < out.high[i], 1, 0))
cond.6 <- cbind(cond.6, cond.6.1)
}
for(j in 1:ncol(x)){colnames(cond.6)[j] <- paste0("c6_", colnames(x)[j])}
return(cond.6)
}
mainTable.df <- read.csv("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv")
for(i in 2:ncol(mainTable.df)){mainTable.df[ ,i] <- as.numeric(mainTable.df[ ,i])} # Convert in numeric
mainTable.df$datetimeisoformat <- ymd_hms(mainTable.df$datetimeisoformat)
mainTable.df$year <- year(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$month <- month(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$day <- day(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$hour <- hour(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$minute <-  minute(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$second <-  second(ymd_hms(mainTable.df$datetimeisoformat))
head(mainTable.df)
x= mainTable.df
x <- x[ ,c("Ch1.S", "Ch2.D", "PC3", "PE4")]
c1 <- cond.4.fn(x)
cond.tot <- cbind(x, c1)
head(cond.tot)
x <- cond.tot
y <- x[grepl(paste0("c", condition, "_"), names(x))]
condition = 4
y <- x[grepl(paste0("c", condition, "_"), names(x))]
x$x <- 1:nrow(x)
myplots <- vector('list', length(y))
for (i in 1:length(y)) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
myplots[[i]] <- local({
i <- i
p1 <-  ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
}
myplots
myplots <- vector('list', length(y))
for (i in 1:length(y)) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
myplots[[i]] <- local({
i <- i
p1 <-  ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red")
})
}
myplots
myplots <- vector('list', length(y))
for (i in 1:length(y)) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
myplots[[i]] <- local({
i <- i
p1 <-  ggplot() +
# geom_point(data = cd1, aes(x = x, y = cd1[,i]),
#            shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
}
myplots
g <- lapply(1:length(y), function(i) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
g
grid.arrange(grobs = g, ncol = 2)
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
mainTable.df <- read.csv("~/Downloads/chl_2022-06-14.csv")
cond.plot(mainTable.df)
x=mainTable.df
condition = 1
y <- x[grepl(paste0("c", condition, "_"), names(x))]
y
x$x <- 1:nrow(x)
head(x)
length(y)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
cd1
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
colnames(y)
head(cd1)
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
misCol
y
misCol <- c("Ch1.S", "Ch2.D", "PC3", "PE4")
misCol
x <- x[, c(misCol)]
x
x <- cbind(x, y)
x
x$x <- 1:nrow(x)
myplots <- lapply(1:length(y), function(i) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
gridExtra::grid.arrange(grobs = myplots, nrow = 2, ncol = 2, top = title)
x=mainTable.df
x <- x[, c(misCol)]
x
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
mainTable.df <- read.csv("~/Downloads/chl_2022-06-14.csv")
head(mainTable.df)
y <- mainTable.df[grepl(paste0("c", condition, "_"), names(mainTable.df))]
condition = 1
y <- mainTable.df[grepl(paste0("c", condition, "_"), names(mainTable.df))]
y
x <- x[, c(misCol)]
x=mainTable.df
misCol <- c("Ch1.S", "Ch2.D", "PC3", "PE4")
x <- x[, c(misCol)]
x <- cbind(x, y)
head(x)
cond.plot <- function(x, condition = 1, title = NA){
y <- x[grepl(paste0("c", condition, "_"), names(x))]
x$x <- 1:nrow(x)
myplots <- lapply(1:length(y), function(i) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
return(gridExtra::grid.arrange(grobs = myplots, nrow = 2, ncol = 2, top = title))
}
cond.plot(x)
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
shiny::runApp()
runApp()
df <- read.csv("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv")
df
cond.1.fn(df[, 2:5])
table(cond.1.fn(df[, 2:5]))
table(cond.1.fn(df))
cond.1 <- cond.1.fn(df[ ,2:5])
head(cond.1)
length(cond.1[ ,1] == 1)
length(cond.1[ ,1] == 0)
cond.1[ ,1] == 0
length(which(cond.1[ ,1] == 0))
length(which(cond.1[ ,1] == 1))
runApp()
runApp()
runApp()
df <- read.csv("~/Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/prova/Ponsel-2021-03-31.csv")
head(df)
cond.1 <- cond.1.fn(df[ ,2:ncol(df)])
head(cond.1)
runApp()
df <- read.csv("~/Downloads/chl_2022-06-16.csv")
head(df)
runApp()
df <- read.csv("~/Downloads/chl_2022-06-16.csv")
head(df)
x=df
y <- x[grepl(paste0("c", condition, "_"), names(x))]
condition = 1
y <- x[grepl(paste0("c", condition, "_"), names(x))]
y
x$x <- 1:nrow(x)
head(x)
length(y)
myplots <- lapply(1:length(y), function(i) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
title = NA
grid.arrange(grobs = myplots, nrow = 2, ncol = 2, top = title)
grid.arrange(grobs = myplots, nrow = length(y)/2, ncol = length(y)/2, top = title)
grid.arrange(grobs = myplots, nrow = length(y)/2, ncol = 2, top = title)
dev.off()
grid.arrange(grobs = myplots, nrow = length(y)/2, ncol = 2, top = title)
length(y)
grid.arrange(grobs = myplots, nrow = length(y)/2, ncol = length(y)/4, top = title)
y
x[y[i] == 1, ]
i=1
x[y[i] == 1, ]
names(cd1)
cd1 <-x[y[i] == 1, ]
names(cd1) %in% colnames(y)
cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
head(cd1)
colnames(y)
!(names(cd1) %in% colnames(y))
runApp()
runApp()
runApp()
df <- read.csv("~/Downloads/chl_2022-06-16.csv")
head(df)
misCol <- colnames(df)[colnames(df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
misCol
# Reorder dataset
mainTable.df <- df[, c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second",
misCol)]
head(mainTable.df)
y <- mainTable.df[grepl(paste0("c1_"), names(mainTable.df))]
y
misCol
x <- mainTable.df[, c(misCol)]
x
x <- cbind(x, y)
x
cond.plot(x, condition = 1, title = "Condition 1")
y <- x[grepl(paste0("c", condition, "_"), names(x))]
condition = 1
y <- x[grepl(paste0("c", condition, "_"), names(x))]
y
x$x <- 1:nrow(x)
myplots <- lapply(1:length(y), function(i) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
myplots
y
myplots <- lapply(1:ncol(y), function(i) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
grid.arrange(grobs = myplots, nrow = length(y)/2, ncol = length(y)/4, top = title)
ncol(y)
head(y)
df <- read.csv("~/Downloads/chl_2022-06-16.csv")
head(df)
misCol <- colnames(df)[colnames(df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
y <- mainTable.df[grepl(paste0("c1_"), names(mainTable.df))]
y <- df[grepl(paste0("c1_"), names(df))]
y
x <- mainTable.df[, c(misCol)]
x <- df[, c(misCol)]
misCol <- colnames(df)[colnames(df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
# Not in
"%ni%" <- Negate("%in%")
misCol <- colnames(df)[colnames(df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
x <- df[, c(misCol)]
head(x)
x <- cbind(x, y)
head(x)
cond.plot(x, condition = 1, title = "Condition 1")
cond.plot <- function(x, condition = NA, title = NA){
y <- x[grepl(paste0("c", condition, "_"), names(x))]
x$x <- 1:nrow(x)
myplots <- lapply(1:length(y), function(i) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
return(gridExtra::grid.arrange(grobs = myplots, length(y)/2, ncol = length(y)/4, top = title))
}
cond.plot(x, condition = 1, title = "Condition 1")
y <- x[grepl(paste0("c", condition, "_"), names(x))]
condition = 1
y <- x[grepl(paste0("c", condition, "_"), names(x))]
y
head(y)
head(x)
y <- df[grepl(paste0("c1_"), names(df))]
x <- df[, c(misCol)]
x <- cbind(x, y)
head(x)
df <- read.csv("~/Downloads/chl_2022-06-16.csv")
head(df)
misCol <- colnames(df)[colnames(df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
y <- df[grepl(paste0("c1_"), names(df))]
x <- df[, c(misCol)]
x <- cbind(x, y)
head(x)
runApp()
df <- read.csv("~/Downloads/chl_2022-06-16(1).csv")
head(df)
y <- df[grepl(paste0("c1_"), names(df))]
y
x <- df[, c(misCol)]
misCol <- colnames(df)[colnames(df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
x <- df[, c(misCol)]
head(x)
x <- cbind(x, y)
head(x)
y <- df[grepl(paste0("c1_"), names(df))]
x <- df[, c(misCol)]
head(x)
cond.plot(x, condition = 1, title = "Condition 1")
df <- read.csv("~/Downloads/chl_2022-06-16.csv")
head(df)
misCol <- colnames(df)[colnames(df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
y <- df[grepl(paste0("c1_"), names(df))]
x <- df[, c(misCol)]
head(x)
cond.plot(x, condition = 1, title = "Condition 1")
y <- x[grepl(paste0("c", condition, "_"), names(x))]
x$x <- 1:nrow(x)
head(x)
ncol(y)
myplots <- lapply(1:ncol(y), function(i) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
grid.arrange(grobs = myplots, nrow = length(y)/2, ncol = 6, top = title)
grid.arrange(grobs = myplots, nrow = 2, ncol = 6, top = title)
grid.arrange(grobs = myplots, nrow = 3, ncol = 6, top = title)
ncol(y)
grid.arrange(grobs = myplots, nrow = 4, ncol = 4, top = title)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gc()
