x <- cbind(cond.df$datetimeisoformat, x, y)
y <- x[grepl(paste0("c", condition, "_"), names(x))]
x$xplot <- 1:nrow(x)
plot_ly(data = x, x = ~cond.df$datetimeisoformat, y = ~x[,i+1], color = ~as.factor(x[,i+5]), type = 'scatter', mode="markers", colors = c("red", "blue"))
# load packages
library(hypervolume)
library(ggplot2)
library(tidyverse)
# calculate occupancy on the penguins dataset
data(penguins,package='palmerpenguins')
penguins_no_na = as.data.frame(na.omit(penguins))
penguins_no_na_split = split(penguins_no_na,
paste(penguins_no_na$species, penguins_no_na$sex,
sep = "_"))
head(penguins_no_na_split)
hv_list = lapply(penguins_no_na_split, function(x) hypervolume_gaussian(
x[, c("bill_length_mm","bill_depth_mm","flipper_length_mm")],
samples.per.point=75, verbose = FALSE))
hv_list
plot(hv_list)
hv_list <- hypervolume_join(hv_list)
hv_list
hv_occupancy_list_sex <- hypervolume_n_occupancy(hv_list, verbose = FALSE,
classification = rep(c("female", "male"), each = 3))
hv_occupancy_list_sex
# get the mean
get_occupancy_stats(hv_occupancy_list_sex, FUN = mean)
# Create main table reading the .csv data
mainTable.df <- read.csv("~/Desktop/Chlorophyll_2022-08-12.csv")
cond.df <- mainTable.df
head(mainTable.df)
misCol <- c("Ch1.S", "Ch2.D",  "PC3",  "PE4")
misColCondition <- colnames(cond.df)[colnames(cond.df) %in% misCol]
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
x <- cond.df[, c(misColCondition)]
x <- cbind(cond.df$datetimeisoformat, x, y)
cond.plot(x, condition = 2, title = paste(colnames(cond.df[, misColCondition])[1]), nPlot = 1)
y <- x[grepl(paste0("c", condition, "_"), names(x))]
condition = 2
y <- x[grepl(paste0("c", condition, "_"), names(x))]
y
x$xplot <- 1:nrow(x)
head(x)
i=1
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
cd0
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
x <- cond.df[, c(misColCondition)]
x <- cbind(x, y, cond.df$datetimeisoformat)
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
x <- cond.df[, c(misColCondition)]
x <- cbind(x, y, cond.df$datetimeisoformat)
y <- x[grepl(paste0("c", condition, "_"), names(x))]
head(x)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
plot_ly(data = x, x = ~cond.df$datetimeisoformat, y = ~x[i], type = 'scatter', mode="markers", colors = c("blue"))
library(plotly)
plot_ly(data = x, x = ~cond.df$datetimeisoformat, y = ~x[i], type = 'scatter', mode="markers", colors = c("blue"))
plot_ly(data = x, x = ~cond.df$datetimeisoformat, y = ~x[,i], type = 'scatter', mode="markers", colors = c("blue"))
plot_ly(data = cd1, x = ~cond.df$datetimeisoformat, y = ~cd1[,i], type = 'scatter', mode="markers", colors = c("blue")) %>%
add_trace(data = cd0, x = ~cond.df$datetimeisoformat, y = ~cd0[,i], type = 'scatter', mode="markers", colors = c("red"))
plot_ly(data = cd1, x = ~cond.df$datetimeisoformat, y = ~cd1[,i], type = 'scatter', mode="markers", colors = c("blue"))
cd1
head(cd1)
colnames(cd1[i])
cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
head(cd1)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
cd0
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
head(cd1)
plot_ly(data = cd1, x = ~cond.df$datetimeisoformat, y = ~cd1[,i], type = 'scatter', mode="markers", colors = c("blue")) %>%
add_trace(data = cd0, x = ~cond.df$datetimeisoformat, y = ~cd0[,i], marker = list(color = 'red'))
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue")
ggplot() +
geom_point(data = cd1, aes(x = cond.df$datetimeisoformat, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = cond.df$datetimeisoformat, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
ggplot() +
geom_point(data = cd1, aes(x = cond.df$datetimeisoformat, y = cd1[,i]),
shape = 21, color = "blue")
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
cd0
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
ncol(cd0)
nrow(cd0)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
if(nrow(cd0) > 0){
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
cd.tot <- rbid(cd1, cd0)
} else {
cd.tot <- cd1
}
cd.tot
plot_ly(data = cd1, x = ~cond.df$datetimeisoformat, y = ~cd1[,i], type = 'scatter', mode="markers", color = ~factor(condition),
colors = c("blue", "red"))
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = c("blue", "red"))
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition))
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = c("blue"))
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition),
if(unique(cd.tot$condition) = 2) {
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition),
if(unique(cd.tot$condition) == 2) {
colors = c("blue", "red")
} else {
colors = c("blue")
}
)
unique(cd.tot$condition)
col.points <- if(unique(cd.tot$condition) == 2) { c("blue", "red")} else {"blue"}
col.points
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = col.points)
i=3
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
if(nrow(cd0) > 0){
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
cd.tot <- rbid(cd1, cd0)
} else {
cd.tot <- cd1
}
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
if(nrow(cd0) > 0){
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
cd.tot <- rbind(cd1, cd0)
} else {
cd.tot <- cd1
}
col.points <- if(unique(cd.tot$condition) == 2) { c("blue", "red")} else {"blue"}
col.points
unique(cd.tot$condition)
length(unique(cd.tot$condition))
col.points <- if(length(unique(cd.tot$condition)) == 2) { c("blue", "red")} else {"blue"}
col.points
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,i],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = col.points)
head(cd.tot)
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,1],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = col.points)
head()
head(cd.tot)
cd1$`cond.df$datetimeisoformat` <- ymd_hms(cd1$`cond.df$datetimeisoformat`)
library(lubridate)
cd1$`cond.df$datetimeisoformat` <- ymd_hms(cd1$`cond.df$datetimeisoformat`)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
cd1$`cond.df$datetimeisoformat` <- ymd_hms(cd1$`cond.df$datetimeisoformat`)
#head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
if(nrow(cd0) > 0){
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
cd0$`cond.df$datetimeisoformat` <- ymd_hms(cd0$`cond.df$datetimeisoformat`)
cd.tot <- rbind(cd1, cd0)
} else {
cd.tot <- cd1
}
col.points <- if(length(unique(cd.tot$condition)) == 2) { c("blue", "red")} else {"blue"}
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,1],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = col.points)
head(cd1)
View(cd1)
View(cd0)
View(x)
cd1 <-x[y[i] == 1, ]
cd1 <-x[y[i] == 1, ]
head(cd1)
cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
head(cd1)
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
head(cd1)
View(cd.tot)
View(cd.tot)
cd.tot %>% arrange(cond.df$datetimeisoformat)
cd.tot <- cd.tot %>% arrange(cond.df$datetimeisoformat)
plot_ly(data = cd.tot, x = ~cond.df$datetimeisoformat, y = ~cd.tot[,1],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = col.points)
View(cd.tot)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "cond.df$datetimeisoformat")]
cd1$condition <- 1
cd1$`cond.df$datetimeisoformat` <- ymd_hms(cd1$`cond.df$datetimeisoformat`)
#head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
if(nrow(cd0) > 0){
cd0 <- cd0[,c(colnames(cd0[i]), "cond.df$datetimeisoformat")]
cd0$condition <- 0
cd0$`cond.df$datetimeisoformat` <- ymd_hms(cd0$`cond.df$datetimeisoformat`)
cd.tot <- rbind(cd1, cd0)
} else {
cd.tot <- cd1
}
cd.tot <- cd.tot %>% arrange(cond.df$datetimeisoformat)
View(cd.tot)
colnames(x)
colnames(x)[length(x)]
y <- cond.df[grepl(paste0("c2_"), names(cond.df))]
x <- cond.df[, c(misColCondition)]
x <- cbind(x, y, cond.df$datetimeisoformat)
colnames(x)[length(x)] <- "datetimeisoformat"
colnames(x)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "datetimeisoformat")]
cd1$condition <- 1
cd1$`cond.df$datetimeisoformat` <- ymd_hms(cd1$`cond.df$datetimeisoformat`)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "datetimeisoformat")]
cd1$condition <- 1
cd1$`cond.df$datetimeisoformat` <- ymd_hms(cd1$`cond.df$datetimeisoformat`)
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd1 <- cd1[,c(colnames(cd1[i]), "datetimeisoformat")]
cd1$condition <- 1
cd1$datetimeisoformat <- ymd_hms(cd1$datetimeisoformat)
#head(cd1)
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
if(nrow(cd0) > 0){
cd0 <- cd0[,c(colnames(cd0[i]), "datetimeisoformat")]
cd0$condition <- 0
cd0$datetimeisoformat <- ymd_hms(cd0$datetimeisoformat)
cd.tot <- rbind(cd1, cd0)
} else {
cd.tot <- cd1
}
cd.tot <- dplyr::arrange(cd.tot, datetimeisoformat)
View(cd.tot)
col.points <- if(length(unique(cd.tot$condition)) == 2) { c("blue", "red")} else {"blue"}
plot_ly(data = cd.tot, x = ~datetimeisoformat, y = ~cd.tot[,1],
type = 'scatter', mode="markers", color = ~factor(condition),
colors = col.points)
library(raster)
dat<-matrix(seq(1:5290),c(115,46))
dim(dat)
View(dat)
dat<-matrix(seq(1:5290),c(10,10))
dim(dat)
seq(1:5290)
runif(1:100)
runif(100)
runif(100)
dat<-matrix(runif(100),c(10,10))
dim(dat)
r <- raster(dat)
plot(r)
sample(dat, 30)
sample(dat, 30) <- NA
sample(dat, 30)
which(sample(dat, 30))
dat[sample(dat, 30), ]
replace(dat, sample(length(dat))
)
replace(dat, sample(dat, 30), NA)
sample(dat, 30)  == dat
sample(dat, 30)
apply(sample(dat, 30)  == dat)
1:length(dat)
dat[sample(1:length(dat), 4, replace = FALSE)] <- NA
dat
dat<-matrix(runif(100),c(10,10))
dim(dat)
dat[sample(1:length(dat), 30, replace = FALSE)] <- NA
length(which(is.na(dat)))
dat.1<-matrix(runif(100),c(10,10))
dat.2<-matrix(runif(100),c(10,10))
dim(dat.1); dim(dat.2)
dat.1[sample(1:length(dat.1), 30, replace = FALSE)] <- NA
length(which(is.na(dat.1)))
dat.2[sample(1:length(dat.2), 30, replace = FALSE)] <- NA
length(which(is.na(dat.2)))
r.1 <- raster(dat.1)
r.2 <- raster(dat.2)
par(mfrow = c(1, 2))
plot(r.1)
plot(r.2)
r.3 <- r1*r2
r.3 <- r.1*r.2
plot(r.3)
r.1.mask <- mask(r.1, r.3)
par(mfrow = c(1, 2))
plot(r.1)
plot(r.3)
r.2.mask <- mask(r.2, r.3)
plot(r.2)
plot(r.3)
r.2.mask <- mask(r.2, r.3)
par(mfrow = c(1, 3))
plot(r.1)
plot(r.1.mask)
plot(r.3)
plot(r.1, main="r.1")
plot(r.1.mask, main="r.1.mask")
plot(r.3, , main="r.3")
plot(r.2, , main="r.2")
plot(r.2.mask, main="r.1.mask")
plot(r.3, , main="r.3")
r.3$layer
r.3$layer@data
r.3$layer@file
as.data.frame(r.3)
library(biomonitoR)
# Load library
library(biomonitoR)
data(macro_ex)
data_bio <- as_biomonitor(x = macro_ex,
group = "mi", # biotic group of interest. mi = macroinvertebrates
dfref = NULL # custom reference database. NULL to set the default reference dataset
)
data_agr <- aggregate_taxa(data_bio)
# calculate genus and family richness
richness(data_agr, tax_lev = "Taxa")
install_github("alexology/biomonitoR", ref = "main", build_vignettes = TRUE)
library(devtools)
install_github("alexology/biomonitoR", ref = "main", build_vignettes = TRUE)
# Load library
library(biomonitoR)
library(biomonitoR)
dfref_gbif <- get_gbif_taxa_tree(macro_ex[, "Taxa"])
data_asb <- as_biomonitor(macro_ex, dfref = dfref_gbif$taxonomy)
data_agg <- aggregate_taxa(data_asb)
richness(data_agr, tax_lev = "Taxa")
data_bio <- as_biomonitor(macro_ex, dfref = dfref_gbif$taxonomy)
data_agr <- aggregate_taxa(data_asb)
richness(data_agr, tax_lev = "Taxa")
dfref_gbif
vignette("functional", package = "biomonitoR")
# load FD
library( FD )
oglio_traits <- traits_mf
traits_mf
macro_ex$Taxa
runif(0:1, length(macro_ex$Taxa))
macro_ex$Taxa
levels(macro_ex$Taxa)
runif(0:1, levels(macro_ex$Taxa))
runif(0:1, 34)
runif(34)
traits_mi <- data.frame(Taxa = macro_ex$Taxa,
t1 = runif(34),
t2 = runif(34),
t3 = runif(34),
t4 = runif(34),
t5 = runif(34))
head(traits_mi)
head(traits_mf)
rownames(traits_mi) <- traits_mi[ , "Taxa" ]
head(traits_mi)
traits_mi <- traits_mi[ , !colnames(traits_mi) %in% "Taxa" ]
traits_mi
data_bio <- as_biomonitor(x = macro_ex,
group = "mi", # biotic group of interest. mi = macroinvertebrates
dfref = NULL #  NULL to set the default reference dataset
)
data_agr <- aggregate_taxa(x = data_bio)
# prepare the traits database
oglio_traits <- traits_mf
rownames( oglio_traits ) <- oglio_traits[ , "Taxa" ]
oglio_traits <- oglio_traits[ , ! colnames( oglio_traits ) %in% "Taxa" ]
oglio.dist <- gowdis( oglio_traits )
oglio.dist
# select the number of axis according to legendre
select_pcoa_axes( oglio.dist , method = "legendre" )
head(oglio.dist)
assign_traits(
x = data_agr,
trait_db = traits_mi)
data_agr <- aggregate_taxa(x = data_bio)
assign_traits(
x = data_agr,
trait_db = traits_mi)
traits_mi
assign_traits(x = data_agr, trait_db = traits_mi)
data_agr
traits_mi)
traits_mi
assign_traits(x = data_agr)
traits_mi <- data.frame(Taxa = macro_ex$Taxa,
t1 = runif(34),
t2 = runif(34),
t3 = runif(34),
t4 = runif(34),
t5 = runif(34))
head(traits_mi)
data_agr <- aggregate_taxa(x = data_bio, trait_db = traits_mi)
traits_mi <- data.frame(Taxa = macro_ex$Taxa,
t1 = runif(34),
t2 = runif(34),
t3 = runif(34),
t4 = runif(34),
t5 = runif(34))
data_bio <- as_biomonitor(x = macro_ex,
group = "mi", # biotic group of interest. mi = macroinvertebrates
dfref = NULL #  NULL to set the default reference dataset
)
data_agr <- aggregate_taxa(x = data_bio)
assign_traits(x = data_agr, trait_db = traits_mi)
data_ts <- assign_traits(x = data_agr, trait_db = traits_mi)
data_ts[data_ts$Taxa %in% "Beraeidae", 1:5]
col_blocks <- rep(1,5)
col_blocks
f_disp(data_agr,
trait_db = data_ts_av,
nbdim = 2,
type = "F",
col_blocks = col_blocks
)
f_disp(data_agr,
trait_db = traits_mi,
nbdim = 2,
type = "F",
col_blocks = col_blocks)
data_ts_av <- average_traits(data_ts)
data_ts_av <- average_traits(data_ts)
traits_mi <- data.frame(Taxa = macro_ex$Taxa,
t1 = runif(34),
t2 = runif(34),
t3 = runif(34),
t4 = runif(34),
t5 = runif(34))
data_bio <- as_biomonitor(x = macro_ex,
group = "mi", # biotic group of interest. mi = macroinvertebrates
dfref = NULL #  NULL to set the default reference dataset
)
data_agr <- aggregate_taxa(x = data_bio)
data_ts <- assign_traits(x = data_agr, trait_db = traits_mi)
data_ts[data_ts$Taxa %in% "Beraeidae", 1:5]
data_ts_av <- average_traits(data_ts)
data_ts <- assign_traits(x = data_agr, trait_db = traits_mi)
data_ts[data_ts$Taxa %in% "Beraeidae", 1:5]
data_ts_av <- average_traits(data_ts, trait_db = traits_mi)
data_ts <- assign_traits(x = data_agr, trait_db = traits_mi)
data_ts[data_ts$Taxa %in% "Beraeidae", 1:5]
data_ts_av <- average_traits(data_ts,
col_blocks = c(1,1,1,1,1))
data_ts_av <- average_traits(data_ts,
col_blocks = c(1))
data_ts_av <- average_traits(data_ts,
col_blocks = c(1,1))
data_ts_av <- average_traits(data_ts,
col_blocks = NULL)
data_ts_av <- average_traits(data_ts,
col_blocks = c(5))
f_disp(data_agr)
f_disp(data_agr,
trait_db = traits_mi)
f_disp(data_agr,
trait_db = traits_mi,
nbdim = 2,
type = "F",
col_blocks = 5)
data_ts[data_ts$Taxa %in% "Beraeidae", 1:5] # Exemple to
data_ts[data_ts$Taxa %in% "Beraeidae", 1:10] # Exemple to
shiny::runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
library(shiny)
runGitHub(repo = 'SIMILE', username = 'TommasoCanc', ref="main", subdir = "Shiny_LT Env Data Analysis")
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
