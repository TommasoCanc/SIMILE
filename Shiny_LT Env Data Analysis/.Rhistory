aggregate(cbind(b = misCol) ~ cbind(a = "hour"), data.agr, FUN = mean)
rep(hour, length(misCol))
mainTable.agr <- aggregate(cbind(misCol) ~ rep(hour, length(misCol)), data.agr, mean)
mainTable.agr <- aggregate(cbind(misCol) ~ rep("hour", length(misCol)), data.agr, mean)
rep("hour", length(misCol))
x <- data.frame(cond1 = sample(letters[1:3], 500, replace=TRUE),
cond2 = sample(LETTERS[1:7], 500, replace = TRUE),
cond3 = sample(LETTERS[1:4], 500, replace = TRUE),
value1 = rnorm(500),
value2 = rnorm(500))
aggregate(cbind(value1,value2) ~ cond1 + cond2, data = x, FUN=sum)
c1 <- c("cond1","cond2","cond3")
v1 <- c("value1","value2")
aggregate(x[v1],by=x[c1],FUN=sum)
mainTable.df <- read.csv("./Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv")
source("./Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/Functions/Functions_v2.R")
for(i in 2:ncol(mainTable.df)){mainTable.df[ ,i] <- as.numeric(mainTable.df[ ,i])}
# Convert and create date columns
mainTable.df$datetimeisoformat <- ymd_hms(mainTable.df$datetimeisoformat)
mainTable.df$year <- year(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$month <- month(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$day <- day(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$hour <- hour(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$minute <-  minute(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$second <-  second(ymd_hms(mainTable.df$datetimeisoformat))
# Column different form date are filtered
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
# Reorder main dataset
mainTable.df <- mainTable.df[ ,c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second",
misCol)]
mainInfo.df <- data.frame(
timePeriodMin = as.character(min(mainTable.df$datetimeisoformat)),
timePeriodMax = as.character(max(mainTable.df$datetimeisoformat)),
nOfRow = nrow(mainTable.df)
)
c1 <- misCol
v1 <- "hour"
aggregate(mainTable.df[v1], by=mainTable.df[c1],FUN=mean)
aggregate(. ~ hour, data = mainTable.df, FUN = mean)
head(mainTable.df)
data.agr <- mainTable.df[ ,c(misCol, "hour")]
head(data.agr)
aggregate(. ~ hour, data = data.agr, FUN = mean)
data.agr <- mainTable.df[ ,c("hour", misCol)]
aggregate(. ~ hour, data = data.agr, FUN = mean)
gc()
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
mainTable.df$datehour <- cut(as.POSIXct(mainTable.df$datetimeisoformat, format= "%Y-%m-%dT%H:%M"),
breaks="hour") # We can substitute with day
mainTable.df <- read.csv("./Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv")
source("./Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis/Functions/Functions_v2.R")
# Convert in numeric
for(i in 2:ncol(mainTable.df)){mainTable.df[ ,i] <- as.numeric(mainTable.df[ ,i])}
mainTable.df$datetimeisoformat <- ymd_hms(mainTable.df$datetimeisoformat)
mainTable.df$year <- year(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$month <- month(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$day <- day(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$hour <- hour(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$minute <-  minute(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$second <-  second(ymd_hms(mainTable.df$datetimeisoformat))
# Column different form date are filtered
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
mainTable.df <- mainTable.df[ ,c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second",
misCol)]
mainTable.df$datehour <- cut(as.POSIXct(mainTable.df$datetimeisoformat, format= "%Y-%m-%dT%H:%M"),
breaks="hour") # We can substitute with day
head(mainTable.df)
data.agr <- mainTable.df[ ,c("datehour", misCol)]
aggregate(. ~ datehour, data = data.agr, FUN = mean)
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
mainTableAgr <-  mainTable.df
mainTableAgr$datehour <- cut(as.POSIXct(mainTable.df$datetimeisoformat, format= "%Y-%m-%dT%H:%M"),
breaks = "hour") # We can substitute with day
data.agr <- mainTableAgr[ ,c("datehour", misCol)]
data.agr
# Data aggregation Table
mainTable.agr <- round(aggregate(. ~ datehour, data = data.agr, FUN = mean), digits = 2)
# Data aggregation Table
mainTable.agr <- round(aggregate(. ~ as.numeric(datehour), data = data.agr, FUN = mean), digits = 2)
mainTable.agr
aggregate(. ~ datehour, data = data.agr, FUN = mean)
mainTable.agr[ ,2:ncol(mainTable.agr)] <- round(mainTable.agr[ ,2:ncol(mainTable.agr)], digits = 2)
mainTable.agr
# Data aggregation Table
mainTable.agr <- aggregate(. ~ datehour, data = data.agr, FUN = mean)
mainTable.agr[ ,2:ncol(mainTable.agr)] <- round(mainTable.agr[ ,2:ncol(mainTable.agr)], digits = 2)
mainTable.agr
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
a <- read.csv("./Desktop/chl_2022-06-23.csv")
cd1 <-a["cond.mult" == 1, ]
cd0 <-a["cond.mult" == 0, ]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
cd1
a["cond.mult" == 1, ]
a
cd1 <- a["cond.mult" == 1, ]
cd1
cd1 <- a[which(a$cond.mult == 1), ]
cd1
cd0 <- a[which(a$cond.mult == 0), ]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0),
shape = 21, color = "red") +
xlab("") + ylab("") + theme_bw()
View(cond.plot)
View(cond.plot)
a$x <- 1:nrow(a)
cd1 <- a[which(a$cond.mult == 1), ]
cd0 <- a[which(a$cond.mult == 0), ]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0),
shape = 21, color = "red") +
xlab("") + ylab("") + theme_bw()
cd1
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0),
shape = 21, color = "red")
View(cond.plot)
# Load data
macro <- fread("~/Desktop/Ebro_Macroinvertebrates/occurrence.txt")
library(data.table)
library(biomonitoR)
library(reshape2)
# Load data
macro <- fread("~/Desktop/Ebro_Macroinvertebrates/occurrence.txt")
head(macro)
write.csv(macro, "~/Desktop/Ebro_Macroinvertebrates/occurrence.csv", row.names = FALSE)
macro <- fread("~/Desktop/Ebro_Macroinvertebrates/occurrence.csv")
head(macro)
# Load data
macro <- fread("~/Desktop/Ebro_Macroinvertebrates/occurrences_filtered.csv")
head(macro)
colnames(macro)
# Load data
macro <- fread("~/Desktop/Ebro_Macroinvertebrates/occurrences_filtered.csv")
macro <- macro[ ,c("kingdom", "phylum", "class", "order", "family", "genus", "genericName", "taxonRank",
"organismQuantity", "establishmentMeans", "year", "month", "day", "eventDate",
"countryCode", "stateProvince", "municipality", "locality", "verbatimElevation",
"decimalLatitude", "decimalLongitude")]
macro <- macro[ ,c("kingdom", "phylum", "class", "order", "family", "genus", "genericName", "taxonRank",
"organismQuantity", "establishmentMeans", "year", "month", "day", "eventDate",
"countryCode", "stateProvince", "locality", "verbatimElevation",
"decimalLatitude", "decimalLongitude")]
head(macro)
# Number of sample points
unique(macro$locality) # <- 471
# How many time the station have been sampled during the 10 years?
localities_year <- macro[ ,c("locality", "year")]
localityCount <- data.frame()
for(i in 1:length(unique(localities_year$locality))){
localityCount.1 <- data.frame(locality = unique(localities_year$locality)[i],
count = nrow(unique(localities_year[localities_year$locality == unique(localities_year$locality)[i], ])))
localityCount <- rbind(localityCount, localityCount.1)
}
length(which(localityCount$count >= 4))
localityCount$locality[which(localityCount$count >= 4)]
# Filter macro table with localities sampled >= 4 years
macroFiltered <- macro[macro$locality %in% localityCount$locality[which(localityCount$count >= 4)], ]
write.csv(macroFiltered, "~/Desktop/Ebro_Macroinvertebrates/macroFilteredR.csv", row.names = FALSE)
head(macroFiltered)
macroFiltered.1 <- macroFiltered[ ,c("genericName", "organismQuantity", "locality", "year")]
unique(macroFiltered.1$year)
macroFiltered.2005 <- macroFiltered.1[macroFiltered.1$year == 2005, ]
macroFiltered.2005 <- macroFiltered.2005[,-"year"]
head(macroFiltered.2005)
macro.wide <- dcast(macroFiltered.2005, scientificName + organismQuantity ~ locality) # Possiamo aggiungere le abbondanze https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html
macro.wide <- dcast(macroFiltered.2005, genericName + organismQuantity ~ locality) # Possiamo aggiungere le abbondanze https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html
head(macro.wide)
macro.wide <- dcast(macroFiltered.2005, genericName ~ organismQuantity  + locality) # Possiamo aggiungere le abbondanze https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html
head(macro.wide)
View(macroFiltered.2005)
macroFiltered.1 <- macroFiltered[ ,c("genericName", "organismQuantity", "locality", "year")]
unique(macroFiltered.1$year)
macroFiltered.2005 <- macroFiltered.1[macroFiltered.1$year == 2005, ]
macroFiltered.2005 <- macroFiltered.2005[,-"year"]
head(macroFiltered.2005)
macro.wide <- dcast(macroFiltered.2005, genericName ~ organismQuantity  + locality) # Possiamo aggiungere le
head(macro.wide)
macro.wide <- dcast(macroFiltered.2005, genericName ~ organismQuantity  + locality, fun.aggregate = sum) # Possiamo aggiungere le abbondanze https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html
macro.wide <- dcast(macroFiltered.2005, genericName + organismQuantity  ~ locality) # Possiamo aggiungere le abbondanze https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html
head(macro.wide)
macro.wide <- dcast(macroFiltered.2005, genericName + organismQuantity  ~ locality, value.var = "dob") # Possiamo aggiungere le abbondanze https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html
macro.wide <- dcast(macroFiltered.2005, genericName + organismQuantity  ~ locality, value.var = "organismQuantity") # Possiamo aggiungere le abbondanze https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html
head(macro.wide)
macro.wide <- dcast(macroFiltered.2005, locality + organismQuantity  ~ genericName) # Possiamo aggiungere le abbondanze https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html
head(macro.wide)
macro.wide <- dcast(macroFiltered.2005, genericName ~ organismQuantity + locality) # Possiamo aggiungere le abbondanze https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html
head(macro.wide)
macro.wide <- dcast(macroFiltered.2005, genericName ~ organismQuantity + locality, value.var = "genericName") # Possiamo aggiungere le abbondanze https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html
head(macro.wide)
macro.wide <- dcast(macroFiltered.2005, genericName ~ organismQuantity + locality, value.var = "organismQuantity")
head(macro.wide)
head(macroFiltered.2005)
reshape(macroFiltered.2005, idvar = "genericName", timevar = "organismQuantity", direction = "wide")
reshape(macroFiltered.2005, idvar = "genericName", timevar = "locality", direction = "wide")
macro.wide <- reshape(macroFiltered.2005, idvar = "genericName", timevar = "locality", direction = "wide") #
View(macroFiltered.2005)
View(macro.wide)
View(macro)
colnames(macro.wide)
grepl("organismQuantity.", "", colnames(macro.wide))
gsub("organismQuantity.", "", colnames(macro.wide))
colnames <- gsub("organismQuantity.", "", colnames(macro.wide))
head(macro.wide)
colnames(macro.wide) <- gsub("organismQuantity.", "", colnames(macro.wide))
head(macro.wide)
macroFiltered.1 <- macroFiltered[ ,c("genericName", "organismQuantity", "locality", "year")]
unique(macroFiltered.1$year)
macroFiltered.2005 <- macroFiltered.1[macroFiltered.1$year == 2005, ]
macroFiltered.2005 <- macroFiltered.2005[,-"year"]
head(macroFiltered.2005)
macro.wide <- reshape(macroFiltered.2005, idvar = "genericName", timevar = "locality", direction = "wide")
colnames(macro.wide) <- gsub("organismQuantity.", "", colnames(macro.wide))
head(macro.wide)
colnames(macro.wide)[1] <- "Taxa"
head(macro.wide)
library(data.table)
library(biomonitoR)
library(reshape2)
data_bio <- as_biomonitor(macro.wide)
data_bio <- as_biomonitor(macro.wide, traceB = TRUE)
View(data_bio)
data_bio$
data_bio$corrected_names
data_bio$
data_bio$
data_bio$suggested_taxa_names
# Load libraries
library(data.table)
library(biomonitoR)
library(reshape2)
#load data.....
macroFiltered <- read.csv("~/Desktop/Ebro_Macroinvertebrates/macroFilteredR.csv")
macroFiltered.1 <- macroFiltered[ ,c("genericName", "organismQuantity", "locality", "year")]
unique(macroFiltered.1$year)
macroFiltered.2005 <- macroFiltered.1[macroFiltered.1$year == 2005, ]
macroFiltered.2005 <- macroFiltered.2005[,-"year"]
macroFiltered.2005 <- macroFiltered.2005[,-c("year")]
head(macroFiltered.2005)
macroFiltered.2005 <- macroFiltered.2005[,-4]
head(macroFiltered.2005)
macro.wide <- reshape(macroFiltered.2005, idvar = "genericName", timevar = "locality", direction = "wide")
warnings()
View(macro.wide)
View(macroFiltered)
View(macroFiltered.2005)
colnames() <- gsub("organismQuantity.", "", colnames(macro.wide))
View(macro.wide)
colnames(macro.wide)
colnames(macro.wide) <- gsub("organismQuantity.", "", colnames(macro.wide))
colnames(macro.wide)[1] <- "Taxa"
head(macro.wide)
tree <- read.csv("~/Desktop/Ebro_Macroinvertebrates/Tree.csv")
head(tree)
# load custom reference taxonomuy dataset
tree <- read.csv("~/Desktop/Ebro_Macroinvertebrates/Tree.csv", sep="\t")
head(tree)
ref_custom <- ref_from_tree(tree)
data_bio <- as_biomonitor(macro.wide, dfref = ref_custom, traceB = TRUE, FUN = bin)
data_bio$corrected_names
data_bio$suggested_taxa_names
ata_agr <- aggregate_taxa(data_bio)
tata_agr <- aggregate_taxa(data_bio)
richness(data_agr, tax_lev = "Family")
data_agr <- aggregate_taxa(data_bio)
richness(data_agr, tax_lev = "Family")
head(macro.wide)
colnames(macro.wide) <- gsub(" ", "_", colnames(macro.wide))
head(macro.wide)
data_bio <- as_biomonitor(macro.wide, dfref = ref_custom, traceB = TRUE, FUN = bin)
data_bio$corrected_names
data_bio$suggested_taxa_names
data_agr <- aggregate_taxa(data_bio)
richness(data_agr, tax_lev = "Family")
macroFiltered <- read.csv("~/Desktop/Ebro_Macroinvertebrates/macroFilteredR.csv")
macroFiltered.1 <- macroFiltered[ ,c("genericName", "organismQuantity", "locality", "year")]
unique(macroFiltered.1$year)
macroFiltered.2005 <- macroFiltered.1[macroFiltered.1$year == 2005, ]
macroFiltered.2005 <- macroFiltered.2005[,-4]
head(macroFiltered.2005)
macro.wide <- reshape(macroFiltered.2005, idvar = "genericName", timevar = "locality", direction = "wide")
colnames(macro.wide) <- gsub("organismQuantity.", "", colnames(macro.wide))
colnames(macro.wide)[1] <- "Taxa"
colnames(macro.wide) <- gsub("  ", " ", colnames(macro.wide))
colnames(macro.wide) <- gsub(" ", "_", colnames(macro.wide))
head(macro.wide)
data_bio <- as_biomonitor(macro.wide, dfref = ref_custom, traceB = TRUE, FUN = bin)
data_bio$corrected_names
data_bio$suggested_taxa_names
data_agr <- aggregate_taxa(data_bio)
richness(data_agr, tax_lev = "Family")
# Load data.....
macroFiltered <- read.csv("~/Desktop/Ebro_Macroinvertebrates/macroFilteredR.csv")
library(data.table)
library(biomonitoR)
library(reshape2)
library(ggplot2)
locality.df <- read.csv("~/Desktop/Ebro_Macroinvertebrates/LocalitiesReviewed.csv")
locality.df$id <- sprintf("St_%03d", 1:length(unique(locality.df$locality)))
head(locality.df)
macro.mg <- merge(macroFiltered, locality.df, by="locality", all.x = TRUE)
# Filter specific columns
macro.mg.1 <- macro.mg[ ,c("genericName", "organismQuantity", "id", "year")]
sort(unique(macro.mg.1$year))
# Load custom reference taxonomuy dataset
tree <- read.csv("~/Desktop/Ebro_Macroinvertebrates/Tree.csv", sep="\t")
head(tree)
ref_custom <- ref_from_tree(tree)
macro.mg.2006 <- macro.mg.1[macro.mg.1$year == 2006, ]
macro.mg.2006 <- macro.mg.2006[,-4] # Remove column with year
unique(macro.mg.2006$organismQuantity) # Abundance
head(macro.mg.2006)
# Transform the dataset in biomonitor format
macro.wide <- reshape(macro.mg.2006, idvar = "genericName", timevar = "id", direction = "wide")
head(macro.wide[ ,1:5])
# Remove organismQuantity. from column names
colnames(macro.wide) <- gsub("organismQuantity.", "", colnames(macro.wide))
# First column name Taxa as biomonitoR needs
colnames(macro.wide)[1] <- "Taxa"
head(macro.wide[ ,1:5])
# Create biomonitoR object and set presence/absence data
data_bio <- as_biomonitor(macro.wide, dfref = ref_custom, traceB = TRUE)
plot(data_bio)
plot(data_bio, type = "abundance")
shiny::runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
runApp('Desktop/GitHub/SIMILE/Shiny_LT Env Data Analysis')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- read.csv("~/Desktop/Tchain_MainTable_2022-07-25.csv")
mainTable.df <- x
mainTable.df[sapply(mainTable.df, function(x) all(is.na(x)))] <- NULL
head(mainTable.df)
# Column different form date are filtered
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
misCol
# Reorder main dataset
mainTable.df <- mainTable.df[, c(
"datetimeisoformat", "year", "month", "day", "hour", "minute", "second",
misCol
)]
head(mainTable.df)
mainTable.df[, mainTable.df$misCol]
mainTable.df[, misCol]
cond.4 <- cond.4.fn(x = mainTable.df[, misCol])
head(cond.4)
View(mainTable.df)
View(cond.4.fn)
x = mainTable.df[, misCol]
x %>% summarise_if(is.numeric, mean)
x %>% summarise_if(is.numeric, mean, na.rm = TRUE)
colMean <- x %>% summarise_if(is.numeric, mean, na.rm = TRUE)
colSd <- x %>% summarise_if(is.numeric, sd, na.rm = TRUE)
tMax <- colMean + (3*colSd)
tMax
tMin <- colMean - (3*colSd)
cond.4 <- data.frame(row.names = 1:nrow(x))
cond.4
for(i in 1:ncol(x)){
cond.4.1 <- data.frame(ifelse(x[ ,i] > tMin[ ,i] & x[ ,i] < tMax[ ,i], 1, 0))
cond.4 <- cbind(cond.4, cond.4.1)
}
for(j in 1:ncol(x)){colnames(cond.4)[j] <- paste0("c4_", colnames(x)[j])}
cond.4
runApp()
View(cond.4.fn)
View(cond.4.fn)
x <- read.csv("~/Desktop/Tchain_MainTable_2022-07-25.csv")
mainTable.df <- x
head(mainTable.df)
cond.1 <- cond.1.fn(x = mainTable.df[, misCol])
runApp()
cond.1 <- cond.1.fn(x = mainTable.df[, misCol])
# Column different form date are filtered
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
cond.1 <- cond.1.fn(x = mainTable.df[, misCol])
head(cond.1)
runApp()
x <- read.csv("~/Desktop/Chlorophyll_2022-07-25.csv")
cond.df <- x
y <- cond.df[grepl(paste0("c1_"), names(cond.df))]
y
runApp()
mainTable.df <- read.csv("~/Desktop/Chlorophyll_MainTable_2022-07-25.csv")
mainTable.df[sapply(mainTable.df, function(x) all(is.na(x)))] <- NULL
head(mainTable.df)
# Column different form date are filtered
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
misCol
x <- cond.df[, c(misCol)]
x
x <- cbind(x, y)
x
cond.plot(x, condition = 1, title = "Condition 1", f.ncol = 2, f.nrow = 2)
View(cond.plot)
View(cond.plot)
y <- x[grepl(paste0("c", condition, "_"), names(x))]
condition = 1
title = "Condition 1"
f.ncol = 2
f.nrow = 2
y <- x[grepl(paste0("c", condition, "_"), names(x))]
y
x$x <- 1:nrow(x)
myplots <- lapply(1:length(y), function(i) {
cd1 <-x[y[i] == 1, ]; cd1 <- cd1[,!(names(cd1) %in% colnames(y))]
cd0 <-x[y[i] == 0, ]; cd0 <- cd0[,!(names(cd0) %in% colnames(y))]
ggplot() +
geom_point(data = cd1, aes(x = x, y = cd1[,i]),
shape = 21, color = "blue") +
geom_point(data = cd0, aes(x = x, y = cd0[,i]),
shape = 21, color = "red") +
xlab("") + ylab(colnames(cd1)[i]) + theme_bw()
})
myplots
plot(myplots[[1]])
runApp()
View(cond.plot)
runApp()
x <- read.csv("~/Desktop/Chlorophyll_2022-07-25.csv")
mainTable.df <- read.csv("~/Desktop/Chlorophyll_MainTable_2022-07-25.csv")
cond.1 <- cond.1.fn(x = mainTable.df[, misCol])
# Column different form date are filtered
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
cond.1 <- cond.1.fn(x = mainTable.df[, misCol])
head(cond.1)
cond.plot(x, condition = 1, title = "Condition 1", f.ncol = 2, f.nrow = 2)
View(cond.plot)
View(cond.plot)
cond.df <- x
y <- cond.df[grepl(paste0("c1_"), names(cond.df))]
x <- cond.df[, c(misCol)]
x <- cbind(x, y)
cond.plot(x, condition = 1, title = "Condition 1", f.ncol = 2, f.nrow = 2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
