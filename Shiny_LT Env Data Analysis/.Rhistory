mainTable.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = ",") %>% bind_rows
head(mainTable.df)
runApp()
runApp()
runApp()
colnames(which(colnames(mainTable.df) == "datetimeisoformat"))
which(colnames(mainTable.df) == "datetimeisoformat")
dateCol <- which(colnames(mainTable.df) == "datetimeisoformat")
dateCol
mainTable.df$datetimeisoformat <- ymd_hms(mainTable.df$datetimeisoformat)
mainTable.df$year <- year(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$month <- month(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$day <- day(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$hour <- hour(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$minute <-  minute(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$second <-  second(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df
# column different form the temporal
colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "day", "hour", "minute", "second")
# column different form the temporal
colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "day", "hour", "minute", "second")]
# column different form the temporal
colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
mainTable.df[, c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second",
misCol)]
runApp()
runApp()
runApp()
runApp()
mainTable.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = ",") %>% bind_rows
head(mainTable.df)
dateCol <- which(colnames(mainTable.df) == "datetimeisoformat")
colnames(which(colnames(mainTable.df) == "datetimeisoformat")) <- "datetimeisoformat"
dateCol <- which(colnames(mainTable.df) == "datetimeisoformat")
colnames(which(colnames(mainTable.df) == "datetimeisoformat")) <- "datetimeisoformat"
mainTable.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = ",") %>% bind_rows
head(mainTable.df)
dateCol <- which(colnames(mainTable.df) == "datetimeisoformat")
colnames(which(colnames(mainTable.df) == "datetimeisoformat")) <- "datetimeisoformat"
mainTable.df
dateCol
mainTable.df$datetimeisoformat <- ymd_hms(mainTable.df$datetimeisoformat)
mainTable.df$year <- year(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$month <- month(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$day <- day(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$hour <- hour(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$minute <-  minute(ymd_hms(mainTable.df$datetimeisoformat))
mainTable.df$second <-  second(ymd_hms(mainTable.df$datetimeisoformat))
# column different form the temporal
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
# Not in
"%ni%" <- Negate("%in%")
# column different form the temporal
misCol <- colnames(mainTable.df)[colnames(mainTable.df) %ni% c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second")]
mainTable.df <- mainTable.df[, c("datetimeisoformat", "year", "month", "day", "hour", "minute", "second",
misCol)]
head(mainTable.df)
x = mainTable.df
y <- x[grepl(paste0("cd", condition), names(x))]
condition = 1
y <- x[grepl(paste0("cd", condition), names(x))]
y
cond.1 <- data.frame(ifelse(!is.na(x) == TRUE, 1, 0))
cond.1
x[ ,misCol]
cond.1 <- data.frame(ifelse(!is.na(x[ ,misCol]) == TRUE, 1, 0))
cond.1
runApp()
runApp()
# Chl_S: Chlorophyll superficial; Chl_D: Chlorophyll deep; PC: Pycochanin; PE: Phycoeritrin
colnames(dataIn()) <- c("datetimeisoformat", "Chl_S", "Chl_D", "PC", "PE")
runApp()
# Update select input with column names
updateSelectInput(session, inputId = "selectColumn",
label = 'Select date column',
choices  = colnames(mainTable.df))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mainTable.df[,c("datetimeisoformat")]
mainTable.df <- lapply("~/Desktop/Rogora_Shiny/Rogora_Shiny/prova/Chlorophyll-2022-03-21-LM1.csv", read.csv, sep = ",") %>% bind_rows
dateCol <- which(colnames(mainTable.df) == "datetimeisoformat")
mainTable.df[,c("datetimeisoformat")]
head(mainTable.df)
mainTable.df[,c("datetimeisoformat", "Ch1.S")]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinyWidgets)
library(dplyr)
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("type_select", "What do you want to select?",
c("Rows" = "Rows",
"Columns" = "Columns")),
conditionalPanel(
condition = "input.type_select == 'Columns'",
uiOutput("picker"),
actionButton("view", "View Selection")
)
),
# Show a plot of the generated distribution
mainPanel(
h2('Mydata'),
DT::dataTableOutput("table"),
)
)
)
library(shiny)
library(DT)
server <- function(session, input, output) {
data <- reactive({
iris
})
output$picker <- renderUI({
pickerInput(inputId = 'pick',
label = 'Choose',
choices = colnames(data()),
options = list(`actions-box` = TRUE),multiple = T)
})
datasetInput <- eventReactive(input$view,{
datasetInput <- data() %>%
select(input$pick)
return(datasetInput)
})
output$table <- DT::renderDataTable(server = FALSE,{
if(input$type_select == "Rows"){
datatable(
data(),
selection = "none",
filter="top",
rownames = FALSE,
extensions = c("Buttons", "Select"),
options = list(
select = TRUE,
dom = 'Blfrtip',
buttons =
list('copy', 'print', list(
extend = 'collection',
buttons = list(
list(extend = 'csv', filename = "File", title = NULL,
exportOptions = list(modifier = list(selected = TRUE))),
list(extend = 'excel', filename = "File", title = NULL,
exportOptions = list(modifier = list(selected = TRUE)))),
text = 'Download'
))
),
class = "display"
)
}else{
datatable(
datasetInput(),
filter="top",
rownames = FALSE,
extensions = 'Buttons',
options = list(
dom = 'Blfrtip',
buttons =
list('copy', 'print', list(
extend = 'collection',
buttons = list(
list(extend = 'csv', filename = "File", title = NULL),
list(extend = 'excel', filename = "File", title = NULL)),
text = 'Download'
))
),
class = "display"
)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/.active-rstudio-document")
library("shiny")
library("shinyWidgets")
ui <- fluidPage(
pickerInput(
inputId = "somevalue",
label = "A label",
choices = c("a", "b", "c", "d"),
selected = NULL,
multiple = TRUE,
options = pickerOptions(maxOptions = 1)
),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderPrint({
input$somevalue
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(DT)
library(shinyWidgets)
library(datasets)
DF <- iris
names(DF) <- gsub("\\.", "", names(DF))
ui <- fluidPage(
fluidRow(
column(width = 10, offset = 1, tags$h3("Filter data with selectize group")),
column(width = 3, offset = 1,
selectizeGroupUI(
id = "my-filters",
params = list(
SepalLength = list(inputId = "SepalLength", title = "SepalLength:"),
SepalWidth = list(inputId = "SepalWidth", title = "SepalWidth:"),
PetalLength = list(inputId = "PetalLength", title = "PetalLength:"),
PetalWidth = list(inputId = "PetalWidth", title = "PetalWidth:"),
species = list(inputId = "Species", title = "Species:")
),
inline = FALSE
)),
column(
width = 10, offset = 1,DT::dataTableOutput(outputId = "table")
)
)
)
server <- function(input, output, session) {
filtered_table <- callModule(
module = selectizeGroupServer,
id = "my-filters",
data = DF,
vars = names(DF)
)
output$table <- DT::renderDataTable(filtered_table())
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinyWidgets)
library(datamods)
install.packages("datamods")
library(shiny)
library(shinyWidgets)
library(datamods)
library(MASS)
# Add some NAs to mpg
mtcars_na <- mtcars
mtcars_na[] <- lapply(
X = mtcars_na,
FUN = function(x) {
x[sample.int(n = length(x), size = sample(5:10, 1))] <- NA
x
}
)
datetime <- data.frame(
date = seq(Sys.Date(), by = "day", length.out = 300),
datetime = seq(Sys.time(), by = "hour", length.out = 300),
num = sample.int(1e5, 300)
)
one_column_numeric <- data.frame(
var1 = rnorm(100)
)
ui <- fluidPage(
tags$h2("Filter data.frame"),
radioButtons(
inputId = "dataset",
label = "Data:",
choices = c(
"iris",
"mtcars",
"mtcars_na",
"Cars93",
"datetime",
"one_column_numeric"
),
inline = TRUE
),
fluidRow(
column(
width = 3,
filter_data_ui("filtering", max_height = "500px")
),
column(
width = 9,
progressBar(
id = "pbar", value = 100,
total = 100, display_pct = TRUE
),
reactable::reactableOutput(outputId = "table"),
tags$b("Code dplyr:"),
verbatimTextOutput(outputId = "code_dplyr"),
tags$b("Expression:"),
verbatimTextOutput(outputId = "code"),
tags$b("Filtered data:"),
verbatimTextOutput(outputId = "res_str")
)
)
)
server <- function(input, output, session) {
data <- reactive({
get(input$dataset)
})
vars <- reactive({
if (identical(input$dataset, "mtcars")) {
setNames(as.list(names(mtcars)[1:5]), c(
"Miles/(US) gallon",
"Number of cylinders",
"Displacement (cu.in.)",
"Gross horsepower",
"Rear axle ratio"
))
} else {
NULL
}
})
res_filter <- filter_data_server(
id = "filtering",
data = data,
name = reactive(input$dataset),
vars = vars,
widget_num = "slider",
widget_date = "slider",
label_na = "Missing"
)
observeEvent(res_filter$filtered(), {
updateProgressBar(
session = session, id = "pbar",
value = nrow(res_filter$filtered()), total = nrow(data())
)
})
output$table <- reactable::renderReactable({
reactable::reactable(res_filter$filtered())
})
output$code_dplyr <- renderPrint({
res_filter$code()
})
output$code <- renderPrint({
res_filter$expr()
})
output$res_str <- renderPrint({
str(res_filter$filtered())
})
}
if (interactive())
shinyApp(ui, server)
runApp()
runApp()
library(shiny)
library(shinyWidgets)
library(datamods)
library(MASS)
# Add some NAs to mpg
mtcars_na <- mtcars
mtcars_na[] <- lapply(
X = mtcars_na,
FUN = function(x) {
x[sample.int(n = length(x), size = sample(5:10, 1))] <- NA
x
}
)
datetime <- data.frame(
date = seq(Sys.Date(), by = "day", length.out = 300),
datetime = seq(Sys.time(), by = "hour", length.out = 300),
num = sample.int(1e5, 300)
)
one_column_numeric <- data.frame(
var1 = rnorm(100)
)
ui <- fluidPage(
tags$h2("Filter data.frame"),
radioButtons(
inputId = "dataset",
label = "Data:",
choices = c(
"iris",
"mtcars",
"mtcars_na",
"Cars93",
"datetime",
"one_column_numeric"
),
inline = TRUE
),
fluidRow(
column(
width = 3,
filter_data_ui("filtering", max_height = "500px")
),
column(
width = 9,
progressBar(
id = "pbar", value = 100,
total = 100, display_pct = TRUE
),
reactable::reactableOutput(outputId = "table"),
tags$b("Code dplyr:"),
verbatimTextOutput(outputId = "code_dplyr"),
tags$b("Expression:"),
verbatimTextOutput(outputId = "code"),
tags$b("Filtered data:"),
verbatimTextOutput(outputId = "res_str")
)
)
)
server <- function(input, output, session) {
data <- reactive({
get(input$dataset)
})
vars <- reactive({
if (identical(input$dataset, "mtcars")) {
setNames(as.list(names(mtcars)[1:5]), c(
"Miles/(US) gallon",
"Number of cylinders",
"Displacement (cu.in.)",
"Gross horsepower",
"Rear axle ratio"
))
} else {
NULL
}
})
res_filter <- filter_data_server(
id = "filtering",
data = data,
name = reactive(input$dataset),
vars = vars,
widget_num = "slider",
widget_date = "slider",
label_na = "Missing"
)
observeEvent(res_filter$filtered(), {
updateProgressBar(
session = session, id = "pbar",
value = nrow(res_filter$filtered()), total = nrow(data())
)
})
output$table <- reactable::renderReactable({
reactable::reactable(res_filter$filtered())
})
output$code_dplyr <- renderPrint({
res_filter$code()
})
output$code <- renderPrint({
res_filter$expr()
})
output$res_str <- renderPrint({
str(res_filter$filtered())
})
}
if (interactive())
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
